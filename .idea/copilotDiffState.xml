<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/data/models/movie_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/models/movie_model.dart" />
              <option name="originalContent" value="class MovieModel {&#10;  final int id;&#10;  final String title;&#10;  final String? overview;&#10;  final String? posterPath;&#10;&#10;  MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.overview,&#10;    this.posterPath,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return MovieModel(&#10;      id: json['id'],&#10;      title: json['title'],&#10;      overview: json['overview'],&#10;      posterPath: json['poster_path'],&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:hive/hive.dart';&#10;&#10;part 'movie_model.g.dart';&#10;&#10;@HiveType(typeId: 0)&#10;class MovieModel extends HiveObject {&#10;  @HiveField(0)&#10;  final int id;&#10;  @HiveField(1)&#10;  final String title;&#10;  @HiveField(2)&#10;  final String? overview;&#10;  @HiveField(3)&#10;  final String? posterPath;&#10;&#10;  MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.overview,&#10;    this.posterPath,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return MovieModel(&#10;      id: json['id'],&#10;      title: json['title'],&#10;      overview: json['overview'],&#10;      posterPath: json['poster_path'],&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/providers/dio_provider.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/providers/dio_provider.dart" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart" />
              <option name="updatedContent" value="import 'package:hive/hive.dart';&#10;import '../models/movie_model.dart';&#10;&#10;class FavoritesStorage {&#10;  static const String boxName = 'favorites';&#10;&#10;  Box&lt;MovieModel&gt; get _box =&gt; Hive.box&lt;MovieModel&gt;(boxName);&#10;&#10;  Future&lt;void&gt; addFavorite(MovieModel movie) async {&#10;    // Aynı film eklenmesin&#10;    if (!_box.values.any((m) =&gt; m.id == movie.id)) {&#10;      await _box.add(movie);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; removeFavorite(int movieId) async {&#10;    final key = _box.keys.firstWhere(&#10;      (k) =&gt; _box.get(k)?.id == movieId,&#10;      orElse: () =&gt; null,&#10;    );&#10;    if (key != null) await _box.delete(key);&#10;  }&#10;&#10;  List&lt;MovieModel&gt; getFavorites() {&#10;    return _box.values.toList();&#10;  }&#10;&#10;  bool isFavorite(int movieId) {&#10;    return _box.values.any((m) =&gt; m.id == movieId);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/main.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:firebase_core/firebase_core.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/login_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/auth_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/login_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/navigation_vievmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/profile_viewmodel.dart';&#10;import 'package:shartflix_movie_app/data/storage/favorites_storage.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import 'package:dio/dio.dart';&#10;import 'package:hive/hive.dart';&#10;import 'package:path_provider/path_provider.dart';&#10;&#10;import 'data/services/auth_service.dart';&#10;import 'data/repositories/movie_repository.dart';&#10;import 'presentation/home/viewmodel/home_cubit.dart';&#10;import 'data/models/movie_model.dart';&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Firebase.initializeApp();&#10;&#10;  // Hive başlatma ve favorites kutusunu açma&#10;  final appDocumentDir = await getApplicationDocumentsDirectory();&#10;  Hive.init(appDocumentDir.path);&#10;  Hive.registerAdapter(MovieModelAdapter());&#10;  await Hive.openBox&lt;MovieModel&gt;('favorites');&#10;&#10;  runApp(const MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MultiProvider(&#10;      providers: [&#10;        Provider(create: (_) =&gt; AuthService()),&#10;        Provider(create: (_) =&gt; Dio()),&#10;        Provider(create: (context) =&gt; MovieRepository(context.read&lt;Dio&gt;())),&#10;        BlocProvider(create: (context) =&gt; HomeCubit(context.read&lt;MovieRepository&gt;())),&#10;        ChangeNotifierProvider(create: (context) =&gt; AuthViewModel(context.read&lt;AuthService&gt;())),&#10;        ChangeNotifierProvider(create: (_) =&gt; LoginViewModel()),&#10;        ChangeNotifierProvider(&#10;          create: (_) =&gt; ProfileViewModel(FavoritesStorage()),&#10;        ),&#10;        ChangeNotifierProvider(create: (_) =&gt; NavigationViewModel()),&#10;      ],&#10;      child: MaterialApp(&#10;        debugShowCheckedModeBanner: false,&#10;        theme: ThemeData.dark(),&#10;        home: const LoginPage(),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:firebase_core/firebase_core.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/login_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/splash_screen.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/auth_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/login_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/navigation_vievmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/profile_viewmodel.dart';&#10;import 'package:shartflix_movie_app/data/storage/favorites_storage.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import 'package:dio/dio.dart';&#10;import 'package:hive/hive.dart';&#10;import 'package:path_provider/path_provider.dart';&#10;&#10;import 'data/services/auth_service.dart';&#10;import 'data/repositories/movie_repository.dart';&#10;import 'presentation/home/viewmodel/home_cubit.dart';&#10;import 'data/models/movie_model.dart';&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Firebase.initializeApp();&#10;&#10;  // Hive başlatma ve favorites kutusunu açma&#10;  final appDocumentDir = await getApplicationDocumentsDirectory();&#10;  Hive.init(appDocumentDir.path);&#10;  Hive.registerAdapter(MovieModelAdapter());&#10;  await Hive.openBox&lt;MovieModel&gt;('favorites');&#10;&#10;  runApp(const MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MultiProvider(&#10;      providers: [&#10;        Provider(create: (_) =&gt; AuthService()),&#10;        Provider(create: (_) =&gt; Dio()),&#10;        Provider(create: (context) =&gt; MovieRepository(context.read&lt;Dio&gt;())),&#10;        BlocProvider(create: (context) =&gt; HomeCubit(context.read&lt;MovieRepository&gt;())),&#10;        ChangeNotifierProvider(create: (context) =&gt; AuthViewModel(context.read&lt;AuthService&gt;())),&#10;        ChangeNotifierProvider(create: (_) =&gt; LoginViewModel()),&#10;        ChangeNotifierProvider(&#10;          create: (_) =&gt; ProfileViewModel(FavoritesStorage()),&#10;        ),&#10;        ChangeNotifierProvider(create: (_) =&gt; NavigationViewModel()),&#10;      ],&#10;      child: MaterialApp(&#10;        debugShowCheckedModeBanner: false,&#10;        theme: ThemeData.dark(),&#10;        home: const SplashScreen(),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  void _toggleLike(int index) {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.filled(movies.length, false);&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;import '../../../data/storage/favorites_storage.dart';&#10;import '../../../data/models/movie_model.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;  final FavoritesStorage _favoritesStorage = FavoritesStorage();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _toggleLike(int index, movie) async {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;    if (liked[index]) {&#10;      // Favoriye ekle&#10;      final movieModel = MovieModel(&#10;        id: movie.id,&#10;        title: movie.title,&#10;        overview: movie.description,&#10;        posterPath: movie.imageUrl != null &amp;&amp; movie.imageUrl!.contains('/w500')&#10;            ? movie.imageUrl!.replaceFirst('https://image.tmdb.org/t/p/w500', '')&#10;            : movie.imageUrl,&#10;      );&#10;      await _favoritesStorage.addFavorite(movieModel);&#10;    } else {&#10;      await _favoritesStorage.removeFavorite(movie.id);&#10;    }&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.generate(&#10;                movies.length,&#10;                (i) =&gt; _favoritesStorage.isFavorite(movies[i].id),&#10;              );&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index, movie),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/login_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/login_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/register_page.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../widgets/custom_text_field.dart';&#10;import '../widgets/social_login_button.dart';&#10;import 'home_page.dart';&#10;&#10;class LoginPage extends StatelessWidget {&#10;  const LoginPage({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Center(&#10;          child: SingleChildScrollView(&#10;            padding: const EdgeInsets.symmetric(horizontal: 32),&#10;            child: Column(&#10;              children: [&#10;                const SizedBox(height: 60),&#10;                const Text(&#10;                  &quot;Merhabalar&quot;,&#10;                  style: TextStyle(&#10;                    color: Colors.white,&#10;                    fontSize: 24,&#10;                    fontWeight: FontWeight.bold,&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                const Text(&#10;                  &quot;Tempus varius a vitae interdum id\ntortor elementum tristique eleifend at.&quot;,&#10;                  textAlign: TextAlign.center,&#10;                  style: TextStyle(color: Colors.white70, fontSize: 14),&#10;                ),&#10;                const SizedBox(height: 32),&#10;&#10;                // Email input&#10;                CustomTextField(&#10;                  controller: authViewModel.emailController,&#10;                  icon: Icons.mail_outline,&#10;                  hint: &quot;E-Posta&quot;,&#10;                ),&#10;&#10;                const SizedBox(height: 16),&#10;&#10;                // Password input&#10;                CustomTextField(&#10;                  controller: authViewModel.passwordController,&#10;                  icon: Icons.lock_outline,&#10;                  hint: &quot;Şifre&quot;,&#10;                  obscure: authViewModel.obscurePassword,&#10;                  suffixIcon: IconButton(&#10;                    icon: Icon(&#10;                      authViewModel.obscurePassword&#10;                          ? Icons.visibility_off&#10;                          : Icons.visibility,&#10;                      color: Colors.white54,&#10;                    ),&#10;                    onPressed: authViewModel.togglePasswordVisibility,&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 12),&#10;                Align(&#10;                  alignment: Alignment.centerLeft,&#10;                  child: TextButton(&#10;                    onPressed: () {&#10;                      // Şifremi unuttum&#10;                    },&#10;                    child: const Text(&#10;                      &quot;Şifremi unuttum&quot;,&#10;                      style: TextStyle(&#10;                          color: Colors.white, decoration: TextDecoration.underline),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                // Giriş Yap butonu&#10;                SizedBox(&#10;                  width: double.infinity,&#10;                  height: 52,&#10;                  child: ElevatedButton(&#10;                    onPressed: authViewModel.isLoading&#10;                        ? null&#10;                        : () async{&#10;                      await authViewModel.login();&#10;                      if (authViewModel.user != null) {&#10;                        Navigator.pushReplacement(&#10;                          context,&#10;                          MaterialPageRoute(builder: (context) =&gt; const HomePage()),&#10;                        );&#10;                      }&#10;&#10;                    },&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12)),&#10;                    ),&#10;                    child: authViewModel.isLoading&#10;                        ? const CircularProgressIndicator(&#10;                      color: Colors.white,&#10;                    )&#10;                        : const Text(&#10;                      &quot;Giriş Yap&quot;,&#10;                      style: TextStyle(fontSize: 16),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Sosyal girişler&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                  children: const [&#10;                    SocialLoginButton(icon: Icons.g_mobiledata), // Google&#10;                    SocialLoginButton(icon: Icons.apple),&#10;                    SocialLoginButton(icon: Icons.facebook),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Kayıt Ol&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.center,&#10;                  children: [&#10;                    const Text(&#10;                      &quot;Bir hesabın yok mu?&quot;,&#10;                      style: TextStyle(color: Colors.white54),&#10;                    ),&#10;                    const SizedBox(width: 8),&#10;                    GestureDetector(&#10;                      onTap: () {&#10;                        Navigator.push(&#10;                          context,&#10;                          MaterialPageRoute(&#10;                            builder: (context) =&gt; const RegisterPage(),&#10;                          ),&#10;                        );&#10;                      },&#10;                      child: const Text(&#10;                        &quot;Kayıt Ol!&quot;,&#10;                        style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;              ],&#10;            ),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/register_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/main_screen.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../widgets/custom_text_field.dart';&#10;import '../widgets/social_login_button.dart';&#10;import 'home_page.dart';&#10;&#10;class LoginPage extends StatelessWidget {&#10;  const LoginPage({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Center(&#10;          child: SingleChildScrollView(&#10;            padding: const EdgeInsets.symmetric(horizontal: 32),&#10;            child: Column(&#10;              children: [&#10;                const SizedBox(height: 60),&#10;                const Text(&#10;                  &quot;Merhabalar&quot;,&#10;                  style: TextStyle(&#10;                    color: Colors.white,&#10;                    fontSize: 24,&#10;                    fontWeight: FontWeight.bold,&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                const Text(&#10;                  &quot;Tempus varius a vitae interdum id\ntortor elementum tristique eleifend at.&quot;,&#10;                  textAlign: TextAlign.center,&#10;                  style: TextStyle(color: Colors.white70, fontSize: 14),&#10;                ),&#10;                const SizedBox(height: 32),&#10;&#10;                // Email input&#10;                CustomTextField(&#10;                  controller: authViewModel.emailController,&#10;                  icon: Icons.mail_outline,&#10;                  hint: &quot;E-Posta&quot;,&#10;                ),&#10;&#10;                const SizedBox(height: 16),&#10;&#10;                // Password input&#10;                CustomTextField(&#10;                  controller: authViewModel.passwordController,&#10;                  icon: Icons.lock_outline,&#10;                  hint: &quot;Şifre&quot;,&#10;                  obscure: authViewModel.obscurePassword,&#10;                  suffixIcon: IconButton(&#10;                    icon: Icon(&#10;                      authViewModel.obscurePassword&#10;                          ? Icons.visibility_off&#10;                          : Icons.visibility,&#10;                      color: Colors.white54,&#10;                    ),&#10;                    onPressed: authViewModel.togglePasswordVisibility,&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 12),&#10;                Align(&#10;                  alignment: Alignment.centerLeft,&#10;                  child: TextButton(&#10;                    onPressed: () {&#10;                      // Şifremi unuttum&#10;                    },&#10;                    child: const Text(&#10;                      &quot;Şifremi unuttum&quot;,&#10;                      style: TextStyle(&#10;                          color: Colors.white, decoration: TextDecoration.underline),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                // Giriş Yap butonu&#10;                SizedBox(&#10;                  width: double.infinity,&#10;                  height: 52,&#10;                  child: ElevatedButton(&#10;                    onPressed: authViewModel.isLoading&#10;                        ? null&#10;                        : () async{&#10;                      await authViewModel.login();&#10;                      if (authViewModel.user != null) {&#10;                        Navigator.pushReplacement(&#10;                          context,&#10;                          MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;                        );&#10;                      }&#10;&#10;                    },&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12)),&#10;                    ),&#10;                    child: authViewModel.isLoading&#10;                        ? const CircularProgressIndicator(&#10;                      color: Colors.white,&#10;                    )&#10;                        : const Text(&#10;                      &quot;Giriş Yap&quot;,&#10;                      style: TextStyle(fontSize: 16),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Sosyal girişler&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                  children: const [&#10;                    SocialLoginButton(icon: Icons.g_mobiledata), // Google&#10;                    SocialLoginButton(icon: Icons.apple),&#10;                    SocialLoginButton(icon: Icons.facebook),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Kayıt Ol&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.center,&#10;                  children: [&#10;                    const Text(&#10;                      &quot;Bir hesabın yok mu?&quot;,&#10;                      style: TextStyle(color: Colors.white54),&#10;                    ),&#10;                    const SizedBox(width: 8),&#10;                    GestureDetector(&#10;                      onTap: () {&#10;                        Navigator.push(&#10;                          context,&#10;                          MaterialPageRoute(&#10;                            builder: (context) =&gt; const RegisterPage(),&#10;                          ),&#10;                        );&#10;                      },&#10;                      child: const Text(&#10;                        &quot;Kayıt Ol!&quot;,&#10;                        style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;              ],&#10;            ),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/main_screen.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/main_screen.dart" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/navigation_vievmodel.dart';&#10;import '../widgets/custom_bottom_navbar.dart';&#10;import 'discover_page.dart';&#10;import 'profile_page.dart';&#10;&#10;class MainScreen extends StatelessWidget {&#10;  const MainScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final navViewModel = Provider.of&lt;NavigationViewModel&gt;(context);&#10;    final pages = [&#10;      const DiscoverPage(),&#10;      const ProfilePage(),&#10;    ];&#10;    return Scaffold(&#10;      body: pages[navViewModel.currentIndex],&#10;      bottomNavigationBar: const CustomBottomNavBar(),&#10;    );&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/profile_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/profile_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:cloud_firestore/cloud_firestore.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../viewmodel/login_viewmodel.dart';&#10;import '../viewmodel/profile_viewmodel.dart';&#10;import 'login_page.dart';&#10;&#10;class ProfilePage extends StatefulWidget {&#10;  const ProfilePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;ProfilePage&gt; createState() =&gt; _ProfilePageState();&#10;}&#10;&#10;class _ProfilePageState extends State&lt;ProfilePage&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    WidgetsBinding.instance.addPostFrameCallback((_) {&#10;      context.read&lt;ProfileViewModel&gt;().loadFavorites();&#10;      context.read&lt;AuthViewModel&gt;().fetchUserName();&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final viewModel = context.watch&lt;ProfileViewModel&gt;();&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;    final isLoading = authViewModel.isUserNameLoading;&#10;    final userName = authViewModel.userName;&#10;&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 16),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              // Header&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                children: [&#10;                  const Icon(Icons.arrow_back, color: Colors.white),&#10;                  const Text(&quot;Profil Detayı&quot;,&#10;                      style: TextStyle(color: Colors.white, fontSize: 18)),&#10;                  Container(&#10;                    padding:&#10;                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),&#10;                    decoration: BoxDecoration(&#10;                      color: Colors.red,&#10;                      borderRadius: BorderRadius.circular(30),&#10;                    ),&#10;                    child: const Text(&quot;Sınırlı Teklif&quot;,&#10;                        style: TextStyle(color: Colors.white, fontSize: 12)),&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              // Kullanıcı Bilgileri&#10;              Row(&#10;                children: [&#10;                  const CircleAvatar(&#10;                    radius: 35,&#10;                    backgroundImage: NetworkImage(&#10;                      'https://i.pravatar.cc/150?img=32', // demo profil resmi&#10;                    ),&#10;                  ),&#10;                  const SizedBox(width: 16),&#10;                  Expanded(&#10;                    child: Column(&#10;                      crossAxisAlignment: CrossAxisAlignment.start,&#10;                      children: [&#10;                        Text(&#10;                            isLoading ? 'Yükleniyor...' : (userName ?? 'Kullanıcı'),&#10;                            style: const TextStyle(color: Colors.white, fontSize: 18)),&#10;                        const SizedBox(height: 4),&#10;                        const Text(&quot;ID: 245677&quot;,&#10;                            style: TextStyle(&#10;                                color: Colors.white54, fontSize: 14)),&#10;                      ],&#10;                    ),&#10;                  ),&#10;                  ElevatedButton(&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      padding: const EdgeInsets.symmetric(&#10;                          vertical: 8, horizontal: 12),&#10;                    ),&#10;                    onPressed: () {&#10;                      Navigator.push(&#10;                        context,&#10;                        MaterialPageRoute(&#10;                          builder: (context) =&gt; ChangeNotifierProvider(&#10;                            create: (_) =&gt; LoginViewModel(),&#10;                            child: const LoginPage(),&#10;                          ),&#10;                        ),&#10;                      );&#10;                    },&#10;                    child: const Text(&quot;Fotoğraf Ekle&quot;),&#10;                  ),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;              const Text(&quot;Beğendiğim Filmler&quot;,&#10;                  style: TextStyle(color: Colors.white, fontSize: 16)),&#10;              const SizedBox(height: 12),&#10;&#10;              // Favori Filmler Grid&#10;              Expanded(&#10;                child: GridView.builder(&#10;                  itemCount: viewModel.favoriteMovies.length,&#10;                  padding: const EdgeInsets.only(bottom: 15),&#10;                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(&#10;                    crossAxisCount: 2,&#10;                    mainAxisSpacing: 16,&#10;                    crossAxisSpacing: 16,&#10;                    childAspectRatio: 0.6,&#10;                  ),&#10;                  itemBuilder: (context, index) {&#10;                    final movie = viewModel.favoriteMovies[index];&#10;                    return LayoutBuilder(&#10;                      builder: (context, constraints) {&#10;                        return ClipRRect(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                          child: Container(&#10;                            color: Colors.white10,&#10;                            child: Column(&#10;                              crossAxisAlignment: CrossAxisAlignment.start,&#10;                              children: [&#10;                                // Poster&#10;                                SizedBox(&#10;                                  height: constraints.maxHeight * 0.75,&#10;                                  width: double.infinity,&#10;                                  child: movie.imageUrl != null&#10;                                      ? Image.network(movie.imageUrl!, fit: BoxFit.cover)&#10;                                      : const SizedBox(),&#10;                                ),&#10;&#10;                                // Başlık ve açıklama&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                                  child: Text(&#10;                                    movie.title,&#10;                                    style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                                    maxLines: 1,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8),&#10;                                  child: Text(&#10;                                    movie.description ?? 'Bilinmiyor',&#10;                                    style: const TextStyle(color: Colors.white54, fontSize: 12),&#10;                                    maxLines: 2,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                              ],&#10;                            ),&#10;                          ),&#10;                        );&#10;                      },&#10;                    );&#10;                  },&#10;                ),&#10;              )&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:cloud_firestore/cloud_firestore.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../viewmodel/login_viewmodel.dart';&#10;import '../viewmodel/profile_viewmodel.dart';&#10;import 'login_page.dart';&#10;&#10;class ProfilePage extends StatefulWidget {&#10;  const ProfilePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;ProfilePage&gt; createState() =&gt; _ProfilePageState();&#10;}&#10;&#10;class _ProfilePageState extends State&lt;ProfilePage&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    WidgetsBinding.instance.addPostFrameCallback((_) {&#10;      context.read&lt;ProfileViewModel&gt;().loadFavorites();&#10;      context.read&lt;AuthViewModel&gt;().fetchUserName();&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final viewModel = context.watch&lt;ProfileViewModel&gt;();&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;    final isLoading = authViewModel.isUserNameLoading;&#10;    final userName = authViewModel.userName;&#10;&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 16),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              // Header&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                children: [&#10;                  const Icon(Icons.arrow_back, color: Colors.white),&#10;                  const Text(&quot;Profil Detayı&quot;,&#10;                      style: TextStyle(color: Colors.white, fontSize: 18)),&#10;                  Container(&#10;                    padding:&#10;                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),&#10;                    decoration: BoxDecoration(&#10;                      color: Colors.red,&#10;                      borderRadius: BorderRadius.circular(30),&#10;                    ),&#10;                    child: const Text(&quot;Sınırlı Teklif&quot;,&#10;                        style: TextStyle(color: Colors.white, fontSize: 12)),&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              // Kullanıcı Bilgileri&#10;              Row(&#10;                children: [&#10;                  const CircleAvatar(&#10;                    radius: 35,&#10;                    backgroundImage: NetworkImage(&#10;                      'https://i.pravatar.cc/150?img=32', // demo profil resmi&#10;                    ),&#10;                  ),&#10;                  const SizedBox(width: 16),&#10;                  Expanded(&#10;                    child: Column(&#10;                      crossAxisAlignment: CrossAxisAlignment.start,&#10;                      children: [&#10;                        Text(&#10;                            isLoading ? 'Yükleniyor...' : (userName ?? 'Kullanıcı'),&#10;                            style: const TextStyle(color: Colors.white, fontSize: 18)),&#10;                        const SizedBox(height: 4),&#10;                        Text(&#10;                          authViewModel.user?.email ?? '-',&#10;                          style: const TextStyle(&#10;                              color: Colors.white54, fontSize: 14),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ),&#10;                  ElevatedButton(&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      padding: const EdgeInsets.symmetric(&#10;                          vertical: 8, horizontal: 12),&#10;                    ),&#10;                    onPressed: () {&#10;                      Navigator.push(&#10;                        context,&#10;                        MaterialPageRoute(&#10;                          builder: (context) =&gt; ChangeNotifierProvider(&#10;                            create: (_) =&gt; LoginViewModel(),&#10;                            child: const LoginPage(),&#10;                          ),&#10;                        ),&#10;                      );&#10;                    },&#10;                    child: const Text(&quot;Fotoğraf Ekle&quot;),&#10;                  ),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;              const Text(&quot;Beğendiğim Filmler&quot;,&#10;                  style: TextStyle(color: Colors.white, fontSize: 16)),&#10;              const SizedBox(height: 12),&#10;&#10;              // Favori Filmler Grid&#10;              Expanded(&#10;                child: GridView.builder(&#10;                  itemCount: viewModel.favoriteMovies.length,&#10;                  padding: const EdgeInsets.only(bottom: 15),&#10;                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(&#10;                    crossAxisCount: 2,&#10;                    mainAxisSpacing: 16,&#10;                    crossAxisSpacing: 16,&#10;                    childAspectRatio: 0.6,&#10;                  ),&#10;                  itemBuilder: (context, index) {&#10;                    final movie = viewModel.favoriteMovies[index];&#10;                    return LayoutBuilder(&#10;                      builder: (context, constraints) {&#10;                        return ClipRRect(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                          child: Container(&#10;                            color: Colors.white10,&#10;                            child: Column(&#10;                              crossAxisAlignment: CrossAxisAlignment.start,&#10;                              children: [&#10;                                // Poster&#10;                                SizedBox(&#10;                                  height: constraints.maxHeight * 0.75,&#10;                                  width: double.infinity,&#10;                                  child: movie.imageUrl != null&#10;                                      ? Image.network(movie.imageUrl!, fit: BoxFit.cover)&#10;                                      : const SizedBox(),&#10;                                ),&#10;&#10;                                // Başlık ve açıklama&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                                  child: Text(&#10;                                    movie.title,&#10;                                    style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                                    maxLines: 1,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8),&#10;                                  child: Text(&#10;                                    movie.description ?? 'Bilinmiyor',&#10;                                    style: const TextStyle(color: Colors.white54, fontSize: 12),&#10;                                    maxLines: 2,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                              ],&#10;                            ),&#10;                          ),&#10;                        );&#10;                      },&#10;                    );&#10;                  },&#10;                ),&#10;              )&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/splash_screen.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/splash_screen.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import 'login_page.dart';&#10;import 'main_screen.dart';&#10;&#10;class SplashScreen extends StatefulWidget {&#10;  const SplashScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();&#10;}&#10;&#10;class _SplashScreenState extends State&lt;SplashScreen&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _checkAuth();&#10;  }&#10;&#10;  Future&lt;void&gt; _checkAuth() async {&#10;    final authViewModel = context.read&lt;AuthViewModel&gt;();&#10;    final user = authViewModel._authService.currentUser;&#10;    if (user != null) {&#10;      authViewModel._user = user;&#10;      await authViewModel.fetchUserName();&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;      );&#10;    } else {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: Center(&#10;        child: CircularProgressIndicator(color: Colors.red),&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import 'login_page.dart';&#10;import 'main_screen.dart';&#10;&#10;class SplashScreen extends StatefulWidget {&#10;  const SplashScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();&#10;}&#10;&#10;class _SplashScreenState extends State&lt;SplashScreen&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _checkAuth();&#10;  }&#10;&#10;  Future&lt;void&gt; _checkAuth() async {&#10;    final authViewModel = context.read&lt;AuthViewModel&gt;();&#10;    final user = authViewModel.user ?? authViewModel.currentUser;&#10;    if (user != null) {&#10;      authViewModel.setUser(user);&#10;      await authViewModel.fetchUserName();&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;      );&#10;    } else {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: Center(&#10;        child: CircularProgressIndicator(color: Colors.red),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/auth_viewmodel.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/auth_viewmodel.dart" />
              <option name="originalContent" value="import 'package:cloud_firestore/cloud_firestore.dart';&#10;import 'package:firebase_auth/firebase_auth.dart';&#10;import 'package:flutter/material.dart';&#10;import '../../../data/services/auth_service.dart';&#10;&#10;class AuthViewModel extends ChangeNotifier {&#10;  final AuthService _authService;&#10;&#10;  AuthViewModel(this._authService);&#10;&#10;  // Ortak controllerlar&#10;  final TextEditingController nameController = TextEditingController();&#10;  final TextEditingController emailController = TextEditingController();&#10;  final TextEditingController passwordController = TextEditingController();&#10;  final TextEditingController repeatPasswordController = TextEditingController();&#10;&#10;  // Şifre gizleme&#10;  bool _obscure1 = true;&#10;  bool get obscure1 =&gt; _obscure1;&#10;  void toggleObscure1() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool _obscure2 = true;&#10;  bool get obscure2 =&gt; _obscure2;&#10;  void toggleObscure2() {&#10;    _obscure2 = !_obscure2;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Şifre 1 için toggle fonksiyonu (register ve login için ortak)&#10;  void togglePasswordVisibility() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Login için backward compatibility: obscurePassword getter&#10;  bool get obscurePassword =&gt; _obscure1;&#10;&#10;  // Kullanıcı sözleşmesi&#10;  bool _termsAccepted = false;&#10;  bool get termsAccepted =&gt; _termsAccepted;&#10;  void setTermsAccepted(bool value) {&#10;    _termsAccepted = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Auth durumları&#10;  User? _user;&#10;  User? get user =&gt; _user;&#10;&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;&#10;  String? _errorMessage;&#10;  String? get errorMessage =&gt; _errorMessage;&#10;&#10;  void clearError() {&#10;    _errorMessage = null;&#10;    notifyListeners();&#10;  }&#10;&#10;  Future&lt;void&gt; login() async {&#10;    _setLoading(true);&#10;    try {&#10;      _user = await _authService.login(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Giriş başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; register() async {&#10;    _setLoading(true);&#10;    try {&#10;      _user = await _authService.registerUser(&#10;        email: emailController.text.trim(),&#10;        password: passwordController.text.trim(),&#10;        name: nameController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Kayıt başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  void _setLoading(bool value) {&#10;    _isLoading = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  void clearControllers() {&#10;    nameController.clear();&#10;    emailController.clear();&#10;    passwordController.clear();&#10;    repeatPasswordController.clear();&#10;  }&#10;&#10;  // Kullanıcı adı durumu&#10;  String? _userName;&#10;  String? get userName =&gt; _userName;&#10;  bool _isUserNameLoading = false;&#10;  bool get isUserNameLoading =&gt; _isUserNameLoading;&#10;&#10;  Future&lt;void&gt; fetchUserName() async {&#10;    _isUserNameLoading = true;&#10;    notifyListeners();&#10;    final user = _user;&#10;    if (user != null) {&#10;      final doc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();&#10;      _userName = doc.data()?['name'] ?? 'Kullanıcı';&#10;    } else {&#10;      _userName = 'Kullanıcı';&#10;    }&#10;    _isUserNameLoading = false;&#10;    notifyListeners();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:cloud_firestore/cloud_firestore.dart';&#10;import 'package:firebase_auth/firebase_auth.dart';&#10;import 'package:flutter/material.dart';&#10;import '../../../data/services/auth_service.dart';&#10;&#10;class AuthViewModel extends ChangeNotifier {&#10;  final AuthService _authService;&#10;&#10;  AuthViewModel(this._authService);&#10;&#10;  // Ortak controllerlar&#10;  final TextEditingController nameController = TextEditingController();&#10;  final TextEditingController emailController = TextEditingController();&#10;  final TextEditingController passwordController = TextEditingController();&#10;  final TextEditingController repeatPasswordController = TextEditingController();&#10;&#10;  // Şifre gizleme&#10;  bool _obscure1 = true;&#10;  bool get obscure1 =&gt; _obscure1;&#10;  void toggleObscure1() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool _obscure2 = true;&#10;  bool get obscure2 =&gt; _obscure2;&#10;  void toggleObscure2() {&#10;    _obscure2 = !_obscure2;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Şifre 1 için toggle fonksiyonu (register ve login için ortak)&#10;  void togglePasswordVisibility() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Login için backward compatibility: obscurePassword getter&#10;  bool get obscurePassword =&gt; _obscure1;&#10;&#10;  // Kullanıcı sözleşmesi&#10;  bool _termsAccepted = false;&#10;  bool get termsAccepted =&gt; _termsAccepted;&#10;  void setTermsAccepted(bool value) {&#10;    _termsAccepted = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Auth durumları&#10;  User? _user;&#10;  User? get user =&gt; _user;&#10;  User? get currentUser =&gt; _authService.currentUser;&#10;&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;&#10;  String? _errorMessage;&#10;  String? get errorMessage =&gt; _errorMessage;&#10;&#10;  void clearError() {&#10;    _errorMessage = null;&#10;    notifyListeners();&#10;  }&#10;&#10;  Future&lt;void&gt; login() async {&#10;    _setLoading(true);&#10;    try {&#10;      _user = await _authService.login(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Giriş başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; register() async {&#10;    _setLoading(true);&#10;    try {&#10;      _user = await _authService.registerUser(&#10;        email: emailController.text.trim(),&#10;        password: passwordController.text.trim(),&#10;        name: nameController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Kayıt başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  void setUser(User user) {&#10;    _user = user;&#10;    notifyListeners();&#10;  }&#10;&#10;  void _setLoading(bool value) {&#10;    _isLoading = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  void clearControllers() {&#10;    nameController.clear();&#10;    emailController.clear();&#10;    passwordController.clear();&#10;    repeatPasswordController.clear();&#10;  }&#10;&#10;  // Kullanıcı adı durumu&#10;  String? _userName;&#10;  String? get userName =&gt; _userName;&#10;  bool _isUserNameLoading = false;&#10;  bool get isUserNameLoading =&gt; _isUserNameLoading;&#10;&#10;  Future&lt;void&gt; fetchUserName() async {&#10;    _isUserNameLoading = true;&#10;    notifyListeners();&#10;    final user = _user;&#10;    if (user != null) {&#10;      final doc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();&#10;      _userName = doc.data()?['name'] ?? 'Kullanıcı';&#10;    } else {&#10;      _userName = 'Kullanıcı';&#10;    }&#10;    _isUserNameLoading = false;&#10;    notifyListeners();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
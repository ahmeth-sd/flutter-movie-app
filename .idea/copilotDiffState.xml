<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/data/datasources/auth_remote_datasource.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/datasources/auth_remote_datasource.dart" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import '../models/login_model.dart';&#10;&#10;abstract class AuthRemoteDataSource {&#10;  Future&lt;LoginModel&gt; login(String email, String password);&#10;  Future&lt;void&gt; register(String email, String password, String fullName);&#10;}&#10;&#10;class AuthRemoteDataSourceImpl implements AuthRemoteDataSource {&#10;  final http.Client client;&#10;&#10;  AuthRemoteDataSourceImpl({required this.client});&#10;&#10;  @override&#10;  Future&lt;LoginModel&gt; login(String email, String password) async {&#10;    final response = await client.post(&#10;      Uri.parse('https://caseapi.servicelabs.tech/user/login'),&#10;      headers: {'Content-Type': 'application/json'},&#10;      body: jsonEncode({&#10;        'email': email,&#10;        'password': password,&#10;      }),&#10;    );&#10;&#10;    print(' Login response status: ${response.statusCode}');&#10;    print(' Login response body: ${response.body}');&#10;&#10;    final decoded = jsonDecode(response.body);&#10;&#10;    if (response.statusCode == 200) {&#10;      final data = decoded['data'];&#10;      if (data == null || data is! Map&lt;String, dynamic&gt;) {&#10;        throw Exception(&quot;error.invalidLoginResponse&quot;);&#10;      }&#10;      return LoginModel.fromJson(data);&#10;    } else {&#10;      final errorMessage = decoded['response']?['message'];&#10;      if (errorMessage != null &amp;&amp;&#10;          errorMessage.toString().toLowerCase().contains('not found')) {&#10;        throw Exception(&quot;error.loginUserNotFound&quot;);&#10;      }&#10;      throw Exception(&quot;error.loginFailed&quot;);&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; register(String email, String password, String fullName) async {&#10;    final response = await client.post(&#10;      Uri.parse('https://caseapi.servicelabs.tech/user/register'),&#10;      headers: {'Content-Type': 'application/json'},&#10;      body: jsonEncode({&#10;        'email': email,&#10;        'password': password,&#10;        'name': fullName,&#10;      }),&#10;    );&#10;&#10;    print(&quot; Register response status: ${response.statusCode}&quot;);&#10;    print(&quot; Register response body: ${response.body}&quot;);&#10;&#10;    if (response.statusCode != 200 &amp;&amp; response.statusCode != 201) {&#10;      final decoded = jsonDecode(response.body);&#10;      final errorMessage = decoded['response']?['message'];&#10;&#10;      if (errorMessage != null &amp;&amp;&#10;          errorMessage.toString().toLowerCase().contains('exists')) {&#10;        throw Exception(&quot;error.registerUserAlreadyExists&quot;);&#10;      }&#10;      throw Exception(&quot;error.registerFailed&quot;);&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/datasources/favorite_movie_remote_datasource.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/datasources/favorite_movie_remote_datasource.dart" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import '../models/favorite_movie_model.dart';&#10;&#10;abstract class FavoriteMovieRemoteDataSource {&#10;  Future&lt;void&gt; toggleFavorite(String token, String movieId);&#10;  Future&lt;List&lt;FavoriteMovieModel&gt;&gt; getFavoriteMovies(String token, {int page = 1, int pageSize = 20});&#10;}&#10;&#10;class FavoriteMovieRemoteDataSourceImpl implements FavoriteMovieRemoteDataSource {&#10;  final http.Client client;&#10;&#10;  FavoriteMovieRemoteDataSourceImpl({required this.client});&#10;&#10;  @override&#10;  Future&lt;void&gt; toggleFavorite(String token, String movieId) async {&#10;    final url = Uri.parse('https://caseapi.servicelabs.tech/movie/favorite/$movieId');&#10;&#10;    final response = await client.post(&#10;      url,&#10;      headers: {&#10;        'Authorization': 'Bearer $token',&#10;        'Content-Type': 'application/json',&#10;      },&#10;    );&#10;&#10;    if (response.statusCode != 200) {&#10;      throw Exception('error.toggleFavoriteFailed');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;FavoriteMovieModel&gt;&gt; getFavoriteMovies(String token, {int page = 1, int pageSize = 20}) async {&#10;    final url = Uri.parse('https://caseapi.servicelabs.tech/movie/favorites?page=$page&amp;pageSize=$pageSize');&#10;&#10;    final response = await client.get(&#10;      url,&#10;      headers: {&#10;        'Authorization': 'Bearer $token',&#10;        'Content-Type': 'application/json',&#10;      },&#10;    );&#10;&#10;    if (response.statusCode == 200) {&#10;      final decoded = json.decode(response.body);&#10;      final moviesJson = decoded['data'];&#10;&#10;      if (moviesJson == null || moviesJson is! List) {&#10;        print(&quot;️ getFavoriteMovies: 'data' alanı boş ya da liste değil&quot;);&#10;        return [];&#10;      }&#10;&#10;      print(&quot; getFavoriteMovies: &quot;+moviesJson.length.toString()+&quot; favori film alındı&quot;);&#10;      return moviesJson.map((json) =&gt; FavoriteMovieModel.fromJson(json)).toList();&#10;    } else {&#10;      throw Exception('error.getFavoritesFailed');&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/datasources/movie_remote_datasource.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/datasources/movie_remote_datasource.dart" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import '../../../domain/entities/movie_page_result.dart';&#10;import '../../../domain/entities/favorite_movie_entity.dart';&#10;import '../models/movie_model.dart';&#10;import '../models/favorite_movie_model.dart';&#10;&#10;abstract class MovieRemoteDataSource {&#10;  Future&lt;MoviePageResult&gt; getMovies({int page = 1, required String token});&#10;  Future&lt;void&gt; toggleFavoriteMovie({required String token, required String movieId});&#10;  Future&lt;List&lt;FavoriteMovieEntity&gt;&gt; getFavoriteMovies(String token);&#10;}&#10;&#10;class MovieRemoteDataSourceImpl implements MovieRemoteDataSource {&#10;  final http.Client client;&#10;&#10;  MovieRemoteDataSourceImpl({required this.client});&#10;&#10;  @override&#10;  Future&lt;MoviePageResult&gt; getMovies({int page = 1, required String token}) async {&#10;    final url = 'https://caseapi.servicelabs.tech/movie/list?page=$page';&#10;    print(' [GET] Request to: $url');&#10;&#10;    final response = await client.get(&#10;      Uri.parse(url),&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;        'Authorization': 'Bearer $token',&#10;      },&#10;    );&#10;&#10;    print(' Movie list response status: ${response.statusCode}');&#10;&#10;    if (response.statusCode == 200) {&#10;      final decoded = json.decode(response.body);&#10;      final data = decoded['data'];&#10;&#10;      final moviesJson = data['movies'] ?? [];&#10;      final currentPage = data['currentPage'] ?? 1;&#10;      final totalPages = data['totalPages'] ?? 1;&#10;&#10;      print(' API response parsed');&#10;      print(' currentPage: $currentPage | totalPages: $totalPages | movies.length: ${moviesJson.length}');&#10;&#10;      final movies = (moviesJson as List)&#10;          .map((json) =&gt; MovieModel.fromJson(json).toEntity())&#10;          .toList();&#10;&#10;      for (var movie in movies) {&#10;        print(' [Movie] ${movie.title} → posterUrl: ${movie.imageUrl}');&#10;      }&#10;&#10;      return MoviePageResult(&#10;        movies: movies,&#10;        currentPage: currentPage,&#10;        totalPages: totalPages,&#10;      );&#10;    } else {&#10;      print(' Failed to load movie list, status: ${response.statusCode}');&#10;      throw Exception('error.loadMovieListFailed');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;void&gt; toggleFavoriteMovie({&#10;    required String token,&#10;    required String movieId,&#10;  }) async {&#10;    final url = 'https://caseapi.servicelabs.tech/movie/favorite/$movieId';&#10;    print(' [POST] Toggle favorite → $url');&#10;&#10;    final response = await client.post(&#10;      Uri.parse(url),&#10;      headers: {&#10;        'Authorization': 'Bearer $token',&#10;      },&#10;    );&#10;&#10;    print(' Toggle response status: ${response.statusCode}');&#10;    if (response.statusCode != 200) {&#10;      throw Exception('error.toggleFavoriteFailed');&#10;    }&#10;  }&#10;&#10;  @override&#10;  Future&lt;List&lt;FavoriteMovieEntity&gt;&gt; getFavoriteMovies(String token) async {&#10;    final url = 'https://caseapi.servicelabs.tech/movie/favorites';&#10;    print(' [GET] Fetch favorites → $url');&#10;&#10;    final response = await client.get(&#10;      Uri.parse(url),&#10;      headers: {&#10;        'Authorization': 'Bearer $token',&#10;      },&#10;    );&#10;&#10;    print(' Favorites response status: ${response.statusCode}');&#10;    if (response.statusCode == 200) {&#10;      final decoded = json.decode(response.body);&#10;      final data = decoded['data'] ?? [];&#10;&#10;      final favorites = (data as List)&#10;          .map((json) =&gt; FavoriteMovieModel.fromJson(json).toEntity())&#10;          .toList();&#10;&#10;      print(' Favori film sayısı: ${favorites.length}');&#10;      return favorites;&#10;    } else {&#10;      throw Exception('error.getFavoritesFailed');&#10;    }&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/models/favorite_movie_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/models/favorite_movie_model.dart" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import '../../domain/entities/favorite_movie_entity.dart';&#10;&#10;class FavoriteMovieModel {&#10;  final String id;&#10;  final String title;&#10;  final String? description;&#10;  final String? imageUrl;&#10;&#10;  FavoriteMovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.description,&#10;    this.imageUrl,&#10;  });&#10;&#10;  factory FavoriteMovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return FavoriteMovieModel(&#10;      id: json['id']?.toString() ?? json['_id']?.toString() ?? '',&#10;      title: json['title'] ?? json['name'] ?? '',&#10;      description: json['description'] ?? json['overview'] ?? '',&#10;      imageUrl: json['imageUrl'] ?? json['posterUrl'] ?? json['posterPath'] ?? json['poster_path'] ?? '',&#10;    );&#10;  }&#10;&#10;  FavoriteMovieEntity toEntity() {&#10;    return FavoriteMovieEntity(&#10;      id: id,&#10;      title: title,&#10;      description: description,&#10;      imageUrl: imageUrl,&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/models/login_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/models/login_model.dart" />
              <option name="updatedContent" value="class LoginModel {&#10;  final String token;&#10;  final String email;&#10;  final String name;&#10;&#10;  LoginModel({required this.token, required this.email, required this.name});&#10;&#10;  factory LoginModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return LoginModel(&#10;      token: json['token'] ?? '',&#10;      email: json['email'] ?? '',&#10;      name: json['name'] ?? '',&#10;    );&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/models/movie_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/models/movie_model.dart" />
              <option name="originalContent" value="import 'package:hive/hive.dart';&#10;&#10;import '../../domain/entities/movie.dart';&#10;&#10;part 'movie_model.g.dart';&#10;&#10;@HiveType(typeId: 0)&#10;class MovieModel extends HiveObject {&#10;  @HiveField(0)&#10;  final int id;&#10;  @HiveField(1)&#10;  final String title;&#10;  @HiveField(2)&#10;  final String? overview;&#10;  @HiveField(3)&#10;  final String? posterPath;&#10;&#10;  MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.overview,&#10;    this.posterPath,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return MovieModel(&#10;      id: json['id'] is int&#10;          ? json['id']&#10;          : json['_id'] is String&#10;              ? json['_id'].hashCode // fallback for string id&#10;              : int.tryParse(json['id'].toString()) ?? 0,&#10;      title: json['title'] ?? json['name'] ?? '',&#10;      overview: json['overview'] ?? json['description'] ?? '',&#10;      posterPath: json['poster_path'] ?? json['posterPath'] ?? json['imageUrl'] ?? json['photoUrl'] ?? json['posterUrl'] ?? json['poster_url'],&#10;    );&#10;  }&#10;&#10;  Movie toEntity() {&#10;    return Movie(&#10;      id: id,&#10;      title: title,&#10;      description: overview,&#10;      imageUrl: posterPath,&#10;    );&#10;  }&#10;&#10;  Map&lt;String, dynamic&gt; toJson() {&#10;    return {&#10;      'id': id,&#10;      'title': title,&#10;      'overview': overview,&#10;      'poster_path': posterPath,&#10;    };&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:json_annotation/json_annotation.dart';&#10;import '../../domain/entities/movie.dart';&#10;&#10;part 'movie_model.g.dart';&#10;&#10;@JsonSerializable()&#10;class MovieModel {&#10;  final String id;&#10;&#10;  @JsonKey(name: 'Title')&#10;  final String title;&#10;&#10;  @JsonKey(name: 'Poster')&#10;  final String posterUrl;&#10;&#10;  @JsonKey(name: 'Plot')&#10;  final String description;&#10;&#10;  const MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    required this.posterUrl,&#10;    required this.description,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$MovieModelFromJson(json);&#10;&#10;  Map&lt;String, dynamic&gt; toJson() =&gt; _$MovieModelToJson(this);&#10;&#10;  Movie toEntity() =&gt; Movie(&#10;    id: int.tryParse(id) ?? id.hashCode,&#10;    title: title,&#10;    imageUrl: posterUrl,&#10;    description: description,&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/repositories/movie_repository.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/repositories/movie_repository.dart" />
              <option name="originalContent" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import '../models/movie_model.dart';&#10;import '../../domain/entities/movie.dart';&#10;import '../../domain/repositories/movie_repo_impl.dart';&#10;import '../services/auth_service.dart';&#10;import '../datasources/movie_remote_datasource.dart';&#10;import '../../domain/entities/movie_page_result.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;class MovieRepository implements IMovieRepository {&#10;  final AuthService authService;&#10;  final http.Client client;&#10;  final MovieRemoteDataSource remoteDataSource;&#10;  final FlutterSecureStorage secureStorage;&#10;&#10;  MovieRepository({&#10;    required this.authService,&#10;    required this.client,&#10;    required this.remoteDataSource,&#10;    required this.secureStorage,&#10;  });&#10;&#10;  @override&#10;  Future&lt;MoviePageResult&gt; getMovies(int page) async {&#10;    final token = await secureStorage.read(key: 'token');&#10;    if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;    return await remoteDataSource.getMovies(page: page, token: token);&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'dart:convert';&#10;import 'package:http/http.dart' as http;&#10;import '../models/movie_model.dart';&#10;import '../../domain/entities/movie.dart';&#10;import '../../domain/repositories/movie_repo_impl.dart';&#10;import '../services/auth_service.dart';&#10;import '../datasources/movie_remote_datasource.dart';&#10;import '../../domain/entities/movie_page_result.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;class MovieRepository implements IMovieRepository {&#10;  final AuthService authService;&#10;  final http.Client client;&#10;  final MovieRemoteDataSource remoteDataSource;&#10;  final FlutterSecureStorage secureStorage;&#10;&#10;  MovieRepository({&#10;    required this.authService,&#10;    required this.client,&#10;    required this.remoteDataSource,&#10;    required this.secureStorage,&#10;  });&#10;&#10;  // MoviePageResult döndüren yeni fonksiyon&#10;  Future&lt;MoviePageResult&gt; getMoviesPageResult(int page) async {&#10;    final token = await secureStorage.read(key: 'token');&#10;    if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;    return await remoteDataSource.getMovies(page: page, token: token);&#10;  }&#10;&#10;  // Eski interface ile uyumlu, sadece film listesi döndüren fonksiyon&#10;  @override&#10;  Future&lt;List&lt;Movie&gt;&gt; getMovies(int page) async {&#10;    final result = await getMoviesPageResult(page);&#10;    return result.movies;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="// Hive ile ilgili tüm kodlar kaldırıldı. Bu sınıf artık kullanılmıyor veya boş bırakılabilir.&#13;&#10;class FavoritesStorage {&#13;&#10;  // Artık favori işlemleri API üzerinden yönetiliyor.&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/domain/entities/favorite_movie_entity.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/domain/entities/favorite_movie_entity.dart" />
              <option name="updatedContent" value="class FavoriteMovieEntity {&#10;  final String id;&#10;  final String title;&#10;  final String? description;&#10;  final String? imageUrl;&#10;&#10;  FavoriteMovieEntity({&#10;    required this.id,&#10;    required this.title,&#10;    this.description,&#10;    this.imageUrl,&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/domain/entities/movie_page_result.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/domain/entities/movie_page_result.dart" />
              <option name="updatedContent" value="import 'movie.dart';&#10;&#10;class MoviePageResult {&#10;  final List&lt;Movie&gt; movies;&#10;  final int currentPage;&#10;  final int totalPages;&#10;&#10;  MoviePageResult({&#10;    required this.movies,&#10;    required this.currentPage,&#10;    required this.totalPages,&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/main.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/main.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:firebase_core/firebase_core.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/login_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/splash_screen.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/auth_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/login_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/navigation_vievmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/profile_viewmodel.dart';&#10;import 'package:shartflix_movie_app/data/storage/favorites_storage.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import 'package:dio/dio.dart';&#10;import 'package:hive/hive.dart';&#10;import 'package:path_provider/path_provider.dart';&#10;import 'package:http/http.dart' as http;&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;import 'data/datasources/movie_remote_datasource.dart';&#10;import 'data/services/auth_service.dart';&#10;import 'data/repositories/movie_repository.dart';&#10;import 'presentation/home/viewmodel/home_cubit.dart';&#10;import 'data/models/movie_model.dart';&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Firebase.initializeApp();&#10;&#10;  // Hive başlatma ve favorites kutusunu açma&#10;  final appDocumentDir = await getApplicationDocumentsDirectory();&#10;  Hive.init(appDocumentDir.path);&#10;  Hive.registerAdapter(MovieModelAdapter());&#10;  await Hive.openBox&lt;MovieModel&gt;('favorites');&#10;&#10;  runApp(MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authService = AuthService();&#10;    return MultiProvider(&#10;      providers: [&#10;        Provider&lt;AuthService&gt;.value(value: authService),&#10;        Provider&lt;http.Client&gt;(create: (_) =&gt; http.Client()),&#10;        Provider(&#10;          create: (context) =&gt; MovieRepository(&#10;            authService: context.read&lt;AuthService&gt;(),&#10;            client: context.read&lt;http.Client&gt;(),&#10;            remoteDataSource: MovieRemoteDataSourceImpl(client: context.read&lt;http.Client&gt;()),&#10;            secureStorage: FlutterSecureStorage(),&#10;          ),&#10;        ),&#10;        BlocProvider(create: (context) =&gt; HomeCubit(context.read&lt;MovieRepository&gt;())),&#10;        ChangeNotifierProvider(create: (context) =&gt; AuthViewModel(context.read&lt;AuthService&gt;())),&#10;        ChangeNotifierProvider(create: (_) =&gt; LoginViewModel()),&#10;        ChangeNotifierProvider(&#10;          create: (_) =&gt; ProfileViewModel(FavoritesStorage()),&#10;        ),&#10;        ChangeNotifierProvider(create: (_) =&gt; NavigationViewModel()),&#10;      ],&#10;      child: MaterialApp(&#10;        debugShowCheckedModeBanner: false,&#10;        theme: ThemeData.dark(),&#10;        home: const SplashScreen(),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:firebase_core/firebase_core.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/login_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/splash_screen.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/auth_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/login_viewmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/navigation_vievmodel.dart';&#10;import 'package:shartflix_movie_app/presentation/home/viewmodel/profile_viewmodel.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import 'package:http/http.dart' as http;&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;import 'data/datasources/movie_remote_datasource.dart';&#10;import 'data/datasources/favorite_movie_remote_datasource.dart';&#10;import 'data/services/auth_service.dart';&#10;import 'data/repositories/movie_repository.dart';&#10;import 'presentation/home/viewmodel/home_cubit.dart';&#10;&#10;void main() async {&#10;  WidgetsFlutterBinding.ensureInitialized();&#10;  await Firebase.initializeApp();&#10;  runApp(MyApp());&#10;}&#10;&#10;class MyApp extends StatelessWidget {&#10;  const MyApp({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authService = AuthService();&#10;    return MultiProvider(&#10;      providers: [&#10;        Provider&lt;AuthService&gt;.value(value: authService),&#10;        Provider&lt;http.Client&gt;(create: (_) =&gt; http.Client()),&#10;        Provider(&#10;          create: (context) =&gt; MovieRepository(&#10;            authService: context.read&lt;AuthService&gt;(),&#10;            client: context.read&lt;http.Client&gt;(),&#10;            remoteDataSource: MovieRemoteDataSourceImpl(client: context.read&lt;http.Client&gt;()),&#10;            secureStorage: FlutterSecureStorage(),&#10;          ),&#10;        ),&#10;        ChangeNotifierProvider(&#10;          create: (context) =&gt; ProfileViewModel(&#10;            remoteDataSource: FavoriteMovieRemoteDataSourceImpl(client: context.read&lt;http.Client&gt;()),&#10;            secureStorage: FlutterSecureStorage(),&#10;          ),&#10;        ),&#10;        BlocProvider(create: (context) =&gt; HomeCubit(context.read&lt;MovieRepository&gt;())),&#10;        ChangeNotifierProvider(create: (context) =&gt; AuthViewModel(context.read&lt;AuthService&gt;())),&#10;        ChangeNotifierProvider(create: (_) =&gt; LoginViewModel()),&#10;        ChangeNotifierProvider(create: (_) =&gt; NavigationViewModel()),&#10;      ],&#10;      child: MaterialApp(&#10;        debugShowCheckedModeBanner: false,&#10;        theme: ThemeData.dark(),&#10;        home: const SplashScreen(),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  void _toggleLike(int index) {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.filled(movies.length, false);&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;import '../../../data/storage/favorites_storage.dart';&#10;import '../../../data/models/movie_model.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;  final FavoritesStorage _favoritesStorage = FavoritesStorage();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _toggleLike(int index, movie) async {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;    if (liked[index]) {&#10;      // Favoriye ekle&#10;      final movieModel = MovieModel(&#10;        id: movie.id,&#10;        title: movie.title,&#10;        overview: movie.description,&#10;        posterPath: movie.imageUrl != null &amp;&amp; movie.imageUrl!.contains('/w500')&#10;            ? movie.imageUrl!.replaceFirst('https://image.tmdb.org/t/p/w500', '')&#10;            : movie.imageUrl,&#10;      );&#10;      await _favoritesStorage.addFavorite(movieModel);&#10;    } else {&#10;      await _favoritesStorage.removeFavorite(movie.id);&#10;    }&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.generate(&#10;                movies.length,&#10;                (i) =&gt; _favoritesStorage.isFavorite(movies[i].id),&#10;              );&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index, movie),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/home_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/home_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;import '../../../data/storage/favorites_storage.dart';&#10;import '../../../data/models/movie_model.dart';&#10;import '../../../data/datasources/favorite_movie_remote_datasource.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;class HomePage extends StatefulWidget {&#10;  const HomePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;HomePage&gt; createState() =&gt; _HomePageState();&#10;}&#10;&#10;class _HomePageState extends State&lt;HomePage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;  final FavoriteMovieRemoteDataSource _favoriteMovieRemoteDataSource = FavoriteMovieRemoteDataSourceImpl(client: http.Client());&#10;  final FlutterSecureStorage _secureStorage = FlutterSecureStorage();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    context.read&lt;HomeCubit&gt;().fetchMovies();&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      final movies = state.pageResult.movies;&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _toggleLike(int index, movie) async {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;    final token = await _secureStorage.read(key: 'token');&#10;    if (token == null) return;&#10;    try {&#10;      await _favoriteMovieRemoteDataSource.toggleFavorite(token, movie.id.toString());&#10;    } catch (e) {&#10;      // Hata yönetimi&#10;      setState(() {&#10;        liked[index] = !liked[index]; // Geri al&#10;      });&#10;    }&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: RefreshIndicator(&#10;        onRefresh: () async {&#10;          await context.read&lt;HomeCubit&gt;().fetchMovies();&#10;        },&#10;        child: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;          builder: (context, state) {&#10;            if (state is HomeLoading) {&#10;              return const Center(child: CircularProgressIndicator());&#10;            } else if (state is HomeLoaded) {&#10;              final movies = state.pageResult.movies;&#10;              if (liked.length != movies.length) {&#10;                liked = List&lt;bool&gt;.generate(&#10;                  movies.length,&#10;                  (i) =&gt; _favoritesStorage.isFavorite(int.tryParse(movies[i].id.toString()) ?? movies[i].id.hashCode),&#10;                );&#10;              }&#10;              return PageView.builder(&#10;                scrollDirection: Axis.vertical,&#10;                controller: _pageController,&#10;                itemCount: movies.length,&#10;                itemBuilder: (context, index) {&#10;                  final movie = movies[index];&#10;                  return Stack(&#10;                    fit: StackFit.expand,&#10;                    children: [&#10;                      if (movie.imageUrl != null &amp;&amp; movie.imageUrl!.isNotEmpty)&#10;                        Image.network(&#10;                          movie.imageUrl!,&#10;                          fit: BoxFit.cover,&#10;                          errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                        )&#10;                      else&#10;                        Container(color: Colors.grey),&#10;                      Container(&#10;                        decoration: BoxDecoration(&#10;                          gradient: LinearGradient(&#10;                            begin: Alignment.bottomCenter,&#10;                            end: Alignment.topCenter,&#10;                            colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                          ),&#10;                        ),&#10;                      ),&#10;                      Positioned(&#10;                        bottom: 60,&#10;                        left: 16,&#10;                        right: 16,&#10;                        child: Column(&#10;                          crossAxisAlignment: CrossAxisAlignment.start,&#10;                          children: [&#10;                            Text(&#10;                              movie.title,&#10;                              style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                            ),&#10;                            const SizedBox(height: 8),&#10;                            Text(&#10;                              movie.description ?? 'Açıklama yok',&#10;                              style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                            ),&#10;                          ],&#10;                        ),&#10;                      ),&#10;                      Positioned(&#10;                        top: 450,&#10;                        right: 20,&#10;                        child: Container(&#10;                          decoration: BoxDecoration(&#10;                            shape: BoxShape.circle,&#10;                            color: Colors.black.withOpacity(0.5),&#10;                          ),&#10;                          child: IconButton(&#10;                            icon: Icon(&#10;                              liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                              color: liked[index] ? Colors.red : Colors.white,&#10;                              size: 30,&#10;                            ),&#10;                            onPressed: () =&gt; _toggleLike(index, movie),&#10;                          ),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  );&#10;                },&#10;              );&#10;            } else if (state is HomeError) {&#10;              return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;            } else {&#10;              return const SizedBox.shrink();&#10;            }&#10;          },&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;import '../../../data/models/movie_model.dart';&#10;import '../../../data/datasources/favorite_movie_remote_datasource.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;import 'package:http/http.dart' as http;&#10;&#10;class HomePage extends StatefulWidget {&#10;  const HomePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;HomePage&gt; createState() =&gt; _HomePageState();&#10;}&#10;&#10;class _HomePageState extends State&lt;HomePage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;  final FavoriteMovieRemoteDataSource _favoriteMovieRemoteDataSource = FavoriteMovieRemoteDataSourceImpl(client: http.Client());&#10;  final FlutterSecureStorage _secureStorage = FlutterSecureStorage();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    context.read&lt;HomeCubit&gt;().fetchMovies();&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      final movies = state.pageResult.movies;&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _toggleLike(int index, movie) async {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;    final token = await _secureStorage.read(key: 'token');&#10;    if (token == null) return;&#10;    try {&#10;      await _favoriteMovieRemoteDataSource.toggleFavorite(token, movie.id.toString());&#10;    } catch (e) {&#10;      // Hata yönetimi&#10;      setState(() {&#10;        liked[index] = !liked[index]; // Geri al&#10;      });&#10;    }&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: RefreshIndicator(&#10;        onRefresh: () async {&#10;          await context.read&lt;HomeCubit&gt;().fetchMovies();&#10;        },&#10;        child: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;          builder: (context, state) {&#10;            if (state is HomeLoading) {&#10;              return const Center(child: CircularProgressIndicator());&#10;            } else if (state is HomeLoaded) {&#10;              final movies = state.pageResult.movies;&#10;              if (liked.length != movies.length) {&#10;                liked = List&lt;bool&gt;.generate(&#10;                  movies.length,&#10;                  (i) =&gt; false,&#10;                );&#10;              }&#10;              return PageView.builder(&#10;                scrollDirection: Axis.vertical,&#10;                controller: _pageController,&#10;                itemCount: movies.length,&#10;                itemBuilder: (context, index) {&#10;                  final movie = movies[index];&#10;                  return Stack(&#10;                    fit: StackFit.expand,&#10;                    children: [&#10;                      if (movie.imageUrl != null &amp;&amp; movie.imageUrl!.isNotEmpty)&#10;                        Image.network(&#10;                          movie.imageUrl!,&#10;                          fit: BoxFit.cover,&#10;                          errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                        )&#10;                      else&#10;                        Container(color: Colors.grey),&#10;                      Container(&#10;                        decoration: BoxDecoration(&#10;                          gradient: LinearGradient(&#10;                            begin: Alignment.bottomCenter,&#10;                            end: Alignment.topCenter,&#10;                            colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                          ),&#10;                        ),&#10;                      ),&#10;                      Positioned(&#10;                        bottom: 60,&#10;                        left: 16,&#10;                        right: 16,&#10;                        child: Column(&#10;                          crossAxisAlignment: CrossAxisAlignment.start,&#10;                          children: [&#10;                            Text(&#10;                              movie.title,&#10;                              style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                            ),&#10;                            const SizedBox(height: 8),&#10;                            Text(&#10;                              movie.description ?? 'Açıklama yok',&#10;                              style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                            ),&#10;                          ],&#10;                        ),&#10;                      ),&#10;                      Positioned(&#10;                        top: 450,&#10;                        right: 20,&#10;                        child: Container(&#10;                          decoration: BoxDecoration(&#10;                            shape: BoxShape.circle,&#10;                            color: Colors.black.withOpacity(0.5),&#10;                          ),&#10;                          child: IconButton(&#10;                            icon: Icon(&#10;                              liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                              color: liked[index] ? Colors.red : Colors.white,&#10;                              size: 30,&#10;                            ),&#10;                            onPressed: () =&gt; _toggleLike(index, movie),&#10;                          ),&#10;                        ),&#10;                      ),&#10;                    ],&#10;                  );&#10;                },&#10;              );&#10;            } else if (state is HomeError) {&#10;              return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;            } else {&#10;              return const SizedBox.shrink();&#10;            }&#10;          },&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/login_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/login_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/register_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/main_screen.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../widgets/custom_text_field.dart';&#10;import '../widgets/social_login_button.dart';&#10;import 'home_page.dart';&#10;&#10;class LoginPage extends StatelessWidget {&#10;  const LoginPage({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Center(&#10;          child: SingleChildScrollView(&#10;            padding: const EdgeInsets.symmetric(horizontal: 32),&#10;            child: Column(&#10;              children: [&#10;                const SizedBox(height: 60),&#10;                const Text(&#10;                  &quot;Merhabalar&quot;,&#10;                  style: TextStyle(&#10;                    color: Colors.white,&#10;                    fontSize: 24,&#10;                    fontWeight: FontWeight.bold,&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                const Text(&#10;                  &quot;Tempus varius a vitae interdum id\ntortor elementum tristique eleifend at.&quot;,&#10;                  textAlign: TextAlign.center,&#10;                  style: TextStyle(color: Colors.white70, fontSize: 14),&#10;                ),&#10;                const SizedBox(height: 32),&#10;&#10;                // Email input&#10;                CustomTextField(&#10;                  controller: authViewModel.emailController,&#10;                  icon: Icons.mail_outline,&#10;                  hint: &quot;E-Posta&quot;,&#10;                ),&#10;&#10;                const SizedBox(height: 16),&#10;&#10;                // Password input&#10;                CustomTextField(&#10;                  controller: authViewModel.passwordController,&#10;                  icon: Icons.lock_outline,&#10;                  hint: &quot;Şifre&quot;,&#10;                  obscure: authViewModel.obscurePassword,&#10;                  suffixIcon: IconButton(&#10;                    icon: Icon(&#10;                      authViewModel.obscurePassword&#10;                          ? Icons.visibility_off&#10;                          : Icons.visibility,&#10;                      color: Colors.white54,&#10;                    ),&#10;                    onPressed: authViewModel.togglePasswordVisibility,&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 12),&#10;                Align(&#10;                  alignment: Alignment.centerLeft,&#10;                  child: TextButton(&#10;                    onPressed: () {&#10;                      // Şifremi unuttum&#10;                    },&#10;                    child: const Text(&#10;                      &quot;Şifremi unuttum&quot;,&#10;                      style: TextStyle(&#10;                          color: Colors.white, decoration: TextDecoration.underline),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                // Giriş Yap butonu&#10;                SizedBox(&#10;                  width: double.infinity,&#10;                  height: 52,&#10;                  child: ElevatedButton(&#10;                    onPressed: authViewModel.isLoading&#10;                        ? null&#10;                        : () async{&#10;                      await authViewModel.login();&#10;                      if (authViewModel.user != null) {&#10;                        Navigator.pushReplacement(&#10;                          context,&#10;                          MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;                        );&#10;                      }&#10;&#10;                    },&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12)),&#10;                    ),&#10;                    child: authViewModel.isLoading&#10;                        ? const CircularProgressIndicator(&#10;                      color: Colors.white,&#10;                    )&#10;                        : const Text(&#10;                      &quot;Giriş Yap&quot;,&#10;                      style: TextStyle(fontSize: 16),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Sosyal girişler&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                  children: const [&#10;                    SocialLoginButton(icon: Icons.g_mobiledata), // Google&#10;                    SocialLoginButton(icon: Icons.apple),&#10;                    SocialLoginButton(icon: Icons.facebook),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Kayıt Ol&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.center,&#10;                  children: [&#10;                    const Text(&#10;                      &quot;Bir hesabın yok mu?&quot;,&#10;                      style: TextStyle(color: Colors.white54),&#10;                    ),&#10;                    const SizedBox(width: 8),&#10;                    GestureDetector(&#10;                      onTap: () {&#10;                        Navigator.push(&#10;                          context,&#10;                          MaterialPageRoute(&#10;                            builder: (context) =&gt; const RegisterPage(),&#10;                          ),&#10;                        );&#10;                      },&#10;                      child: const Text(&#10;                        &quot;Kayıt Ol!&quot;,&#10;                        style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;              ],&#10;            ),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/register_page.dart';&#10;import 'package:shartflix_movie_app/presentation/home/view/main_screen.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../widgets/custom_text_field.dart';&#10;import '../widgets/social_login_button.dart';&#10;import 'home_page.dart';&#10;&#10;class LoginPage extends StatelessWidget {&#10;  const LoginPage({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Center(&#10;          child: SingleChildScrollView(&#10;            padding: const EdgeInsets.symmetric(horizontal: 32),&#10;            child: Column(&#10;              children: [&#10;                const SizedBox(height: 60),&#10;                const Text(&#10;                  &quot;Merhabalar&quot;,&#10;                  style: TextStyle(&#10;                    color: Colors.white,&#10;                    fontSize: 24,&#10;                    fontWeight: FontWeight.bold,&#10;                  ),&#10;                ),&#10;                const SizedBox(height: 12),&#10;                const Text(&#10;                  &quot;Tempus varius a vitae interdum id\ntortor elementum tristique eleifend at.&quot;,&#10;                  textAlign: TextAlign.center,&#10;                  style: TextStyle(color: Colors.white70, fontSize: 14),&#10;                ),&#10;                const SizedBox(height: 32),&#10;&#10;                // Email input&#10;                CustomTextField(&#10;                  controller: authViewModel.emailController,&#10;                  icon: Icons.mail_outline,&#10;                  hint: &quot;E-Posta&quot;,&#10;                ),&#10;&#10;                const SizedBox(height: 16),&#10;&#10;                // Password input&#10;                CustomTextField(&#10;                  controller: authViewModel.passwordController,&#10;                  icon: Icons.lock_outline,&#10;                  hint: &quot;Şifre&quot;,&#10;                  obscure: authViewModel.obscurePassword,&#10;                  suffixIcon: IconButton(&#10;                    icon: Icon(&#10;                      authViewModel.obscurePassword&#10;                          ? Icons.visibility_off&#10;                          : Icons.visibility,&#10;                      color: Colors.white54,&#10;                    ),&#10;                    onPressed: authViewModel.togglePasswordVisibility,&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 12),&#10;                Align(&#10;                  alignment: Alignment.centerLeft,&#10;                  child: TextButton(&#10;                    onPressed: () {&#10;                      // Şifremi unuttum&#10;                    },&#10;                    child: const Text(&#10;                      &quot;Şifremi unuttum&quot;,&#10;                      style: TextStyle(&#10;                          color: Colors.white, decoration: TextDecoration.underline),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                // Giriş Yap butonu&#10;                SizedBox(&#10;                  width: double.infinity,&#10;                  height: 52,&#10;                  child: ElevatedButton(&#10;                    onPressed: authViewModel.isLoading&#10;                        ? null&#10;                        : () async{&#10;                      await authViewModel.login();&#10;                      if (authViewModel.loginModel != null) {&#10;                        Navigator.pushReplacement(&#10;                          context,&#10;                          MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;                        );&#10;                      }&#10;                    },&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      shape: RoundedRectangleBorder(&#10;                          borderRadius: BorderRadius.circular(12)),&#10;                    ),&#10;                    child: authViewModel.isLoading&#10;                        ? const CircularProgressIndicator(&#10;                      color: Colors.white,&#10;                    )&#10;                        : const Text(&#10;                      &quot;Giriş Yap&quot;,&#10;                      style: TextStyle(fontSize: 16),&#10;                    ),&#10;                  ),&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Sosyal girişler&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;                  children: const [&#10;                    SocialLoginButton(icon: Icons.g_mobiledata), // Google&#10;                    SocialLoginButton(icon: Icons.apple),&#10;                    SocialLoginButton(icon: Icons.facebook),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;&#10;                // Kayıt Ol&#10;                Row(&#10;                  mainAxisAlignment: MainAxisAlignment.center,&#10;                  children: [&#10;                    const Text(&#10;                      &quot;Bir hesabın yok mu?&quot;,&#10;                      style: TextStyle(color: Colors.white54),&#10;                    ),&#10;                    const SizedBox(width: 8),&#10;                    GestureDetector(&#10;                      onTap: () {&#10;                        Navigator.push(&#10;                          context,&#10;                          MaterialPageRoute(&#10;                            builder: (context) =&gt; const RegisterPage(),&#10;                          ),&#10;                        );&#10;                      },&#10;                      child: const Text(&#10;                        &quot;Kayıt Ol!&quot;,&#10;                        style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),&#10;                      ),&#10;                    ),&#10;                  ],&#10;                ),&#10;&#10;                const SizedBox(height: 24),&#10;              ],&#10;            ),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/profile_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/profile_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import 'package:image_picker/image_picker.dart';&#10;import 'dart:io';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../viewmodel/profile_viewmodel.dart';&#10;&#10;class ProfilePage extends StatefulWidget {&#10;  const ProfilePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;ProfilePage&gt; createState() =&gt; _ProfilePageState();&#10;}&#10;&#10;class _ProfilePageState extends State&lt;ProfilePage&gt; {&#10;  File? _profileImage;&#10;&#10;  Future&lt;void&gt; _pickImage() async {&#10;    final picker = ImagePicker();&#10;    showModalBottomSheet(&#10;      context: context,&#10;      shape: const RoundedRectangleBorder(&#10;        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),&#10;      ),&#10;      builder: (context) {&#10;        return SafeArea(&#10;          child: Wrap(&#10;            children: [&#10;              ListTile(&#10;                leading: const Icon(Icons.photo_library),&#10;                title: const Text('Galeriden Seç'),&#10;                onTap: () async {&#10;                  final pickedFile = await picker.pickImage(source: ImageSource.gallery);&#10;                  if (pickedFile != null) {&#10;                    setState(() {&#10;                      _profileImage = File(pickedFile.path);&#10;                    });&#10;                  }&#10;                  Navigator.of(context).pop();&#10;                },&#10;              ),&#10;              ListTile(&#10;                leading: const Icon(Icons.camera_alt),&#10;                title: const Text('Kamera ile Çek'),&#10;                onTap: () async {&#10;                  final pickedFile = await picker.pickImage(source: ImageSource.camera);&#10;                  if (pickedFile != null) {&#10;                    setState(() {&#10;                      _profileImage = File(pickedFile.path);&#10;                    });&#10;                  }&#10;                  Navigator.of(context).pop();&#10;                },&#10;              ),&#10;            ],&#10;          ),&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    WidgetsBinding.instance.addPostFrameCallback((_) {&#10;      context.read&lt;ProfileViewModel&gt;().loadFavorites();&#10;      context.read&lt;AuthViewModel&gt;().fetchUserName();&#10;    });&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final viewModel = context.watch&lt;ProfileViewModel&gt;();&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;    final isLoading = authViewModel.isUserNameLoading;&#10;    final userName = authViewModel.userName;&#10;&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 16),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              // Header&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                children: [&#10;                  const Icon(Icons.arrow_back, color: Colors.white),&#10;                  const Text(&quot;Profil Detayı&quot;,&#10;                      style: TextStyle(color: Colors.white, fontSize: 18)),&#10;                  Container(&#10;                    padding:&#10;                        const EdgeInsets.symmetric(horizontal: 12, vertical: 6),&#10;                    decoration: BoxDecoration(&#10;                      color: Colors.red,&#10;                      borderRadius: BorderRadius.circular(30),&#10;                    ),&#10;                    child: const Text(&quot;Sınırlı Teklif&quot;,&#10;                        style: TextStyle(color: Colors.white, fontSize: 12)),&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              // Kullanıcı Bilgileri&#10;              Row(&#10;                children: [&#10;                  CircleAvatar(&#10;                    radius: 35,&#10;                    backgroundImage: _profileImage != null&#10;                        ? FileImage(_profileImage!)&#10;                        : const NetworkImage('https://i.pravatar.cc/150?img=32') as ImageProvider,&#10;                  ),&#10;                  const SizedBox(width: 16),&#10;                  Expanded(&#10;                    child: Column(&#10;                      crossAxisAlignment: CrossAxisAlignment.start,&#10;                      children: [&#10;                        Text(&#10;                            isLoading ? 'Yükleniyor...' : (userName ?? 'Kullanıcı'),&#10;                            style: const TextStyle(color: Colors.white, fontSize: 18)),&#10;                        const SizedBox(height: 4),&#10;                        Text(&#10;                          authViewModel.user?.email ?? '-',&#10;                          style: const TextStyle(&#10;                              color: Colors.white54, fontSize: 14),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ),&#10;                  ElevatedButton(&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      padding: const EdgeInsets.symmetric(&#10;                          vertical: 8, horizontal: 12),&#10;                    ),&#10;                    onPressed: _pickImage,&#10;                    child: const Text(&quot;Fotoğraf Ekle&quot;),&#10;                  ),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;              const Text(&quot;Beğendiğim Filmler&quot;,&#10;                  style: TextStyle(color: Colors.white, fontSize: 16)),&#10;              const SizedBox(height: 12),&#10;&#10;              // Favori Filmler Grid&#10;              Expanded(&#10;                child: GridView.builder(&#10;                  itemCount: viewModel.favoriteMovies.length,&#10;                  padding: const EdgeInsets.only(bottom: 15),&#10;                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(&#10;                    crossAxisCount: 2,&#10;                    mainAxisSpacing: 16,&#10;                    crossAxisSpacing: 16,&#10;                    childAspectRatio: 0.6,&#10;                  ),&#10;                  itemBuilder: (context, index) {&#10;                    final movie = viewModel.favoriteMovies[index];&#10;                    return LayoutBuilder(&#10;                      builder: (context, constraints) {&#10;                        return ClipRRect(&#10;                          borderRadius: BorderRadius.circular(12),&#10;                          child: Container(&#10;                            color: Colors.white10,&#10;                            child: Column(&#10;                              crossAxisAlignment: CrossAxisAlignment.start,&#10;                              children: [&#10;                                // Poster&#10;                                SizedBox(&#10;                                  height: constraints.maxHeight * 0.75,&#10;                                  width: double.infinity,&#10;                                  child: movie.imageUrl != null&#10;                                      ? Image.network(movie.imageUrl!, fit: BoxFit.cover)&#10;                                      : const SizedBox(),&#10;                                ),&#10;&#10;                                // Başlık ve açıklama&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                                  child: Text(&#10;                                    movie.title,&#10;                                    style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                                    maxLines: 1,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                                Padding(&#10;                                  padding: const EdgeInsets.symmetric(horizontal: 8),&#10;                                  child: Text(&#10;                                    movie.description ?? 'Bilinmiyor',&#10;                                    style: const TextStyle(color: Colors.white54, fontSize: 12),&#10;                                    maxLines: 2,&#10;                                    overflow: TextOverflow.ellipsis,&#10;                                  ),&#10;                                ),&#10;                              ],&#10;                            ),&#10;                          ),&#10;                        );&#10;                      },&#10;                    );&#10;                  },&#10;                ),&#10;              )&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'dart:io';&#10;import 'package:flutter/material.dart';&#10;import 'package:image_picker/image_picker.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import '../viewmodel/profile_viewmodel.dart';&#10;&#10;class ProfilePage extends StatefulWidget {&#10;  const ProfilePage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;ProfilePage&gt; createState() =&gt; _ProfilePageState();&#10;}&#10;&#10;class _ProfilePageState extends State&lt;ProfilePage&gt; {&#10;  File? _profileImage;&#10;  late final ScrollController _scrollController;&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _scrollController = ScrollController();&#10;    _scrollController.addListener(_onScroll);&#10;    WidgetsBinding.instance.addPostFrameCallback((_) {&#10;      context.read&lt;ProfileViewModel&gt;().loadFavorites(refresh: true);&#10;      context.read&lt;AuthViewModel&gt;().fetchUserName();&#10;    });&#10;  }&#10;&#10;  void _onScroll() {&#10;    final vm = context.read&lt;ProfileViewModel&gt;();&#10;    if (_scrollController.position.pixels &gt;= _scrollController.position.maxScrollExtent - 200) {&#10;      if (vm.hasMore &amp;&amp; !vm.isLoadingMore) {&#10;        vm.loadMoreFavorites();&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _pickImage() async {&#10;    final picker = ImagePicker();&#10;    showModalBottomSheet(&#10;      context: context,&#10;      shape: const RoundedRectangleBorder(&#10;        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),&#10;      ),&#10;      builder: (context) {&#10;        return SafeArea(&#10;          child: Wrap(&#10;            children: [&#10;              ListTile(&#10;                leading: const Icon(Icons.photo_library),&#10;                title: const Text('Galeriden Seç'),&#10;                onTap: () async {&#10;                  final pickedFile = await picker.pickImage(source: ImageSource.gallery);&#10;                  if (pickedFile != null) {&#10;                    setState(() {&#10;                      _profileImage = File(pickedFile.path);&#10;                    });&#10;                  }&#10;                  Navigator.of(context).pop();&#10;                },&#10;              ),&#10;              ListTile(&#10;                leading: const Icon(Icons.camera_alt),&#10;                title: const Text('Kamera ile Çek'),&#10;                onTap: () async {&#10;                  final pickedFile = await picker.pickImage(source: ImageSource.camera);&#10;                  if (pickedFile != null) {&#10;                    setState(() {&#10;                      _profileImage = File(pickedFile.path);&#10;                    });&#10;                  }&#10;                  Navigator.of(context).pop();&#10;                },&#10;              ),&#10;            ],&#10;          ),&#10;        );&#10;      },&#10;    );&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _scrollController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    final profileViewModel = context.watch&lt;ProfileViewModel&gt;();&#10;    final authViewModel = context.watch&lt;AuthViewModel&gt;();&#10;    final isLoading = authViewModel.isUserNameLoading;&#10;    final userName = authViewModel.userName;&#10;    final userEmail = authViewModel.loginModel?.email ?? '-';&#10;&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SafeArea(&#10;        child: Padding(&#10;          padding: const EdgeInsets.symmetric(horizontal: 16),&#10;          child: Column(&#10;            crossAxisAlignment: CrossAxisAlignment.start,&#10;            children: [&#10;              // Header&#10;              Row(&#10;                mainAxisAlignment: MainAxisAlignment.spaceBetween,&#10;                children: [&#10;                  const Icon(Icons.arrow_back, color: Colors.white),&#10;                  const Text(&quot;Profil Detayı&quot;,&#10;                      style: TextStyle(color: Colors.white, fontSize: 18)),&#10;                  Container(&#10;                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),&#10;                    decoration: BoxDecoration(&#10;                      color: Colors.red,&#10;                      borderRadius: BorderRadius.circular(30),&#10;                    ),&#10;                    child: const Text(&quot;Sınırlı Teklif&quot;,&#10;                        style: TextStyle(color: Colors.white, fontSize: 12)),&#10;                  )&#10;                ],&#10;              ),&#10;              const SizedBox(height: 24),&#10;&#10;              // Kullanıcı Bilgileri&#10;              Row(&#10;                children: [&#10;                  CircleAvatar(&#10;                    radius: 35,&#10;                    backgroundImage: _profileImage != null&#10;                        ? FileImage(_profileImage!)&#10;                        : const AssetImage('assets/SinFlixSplash.png') as ImageProvider,&#10;                  ),&#10;                  const SizedBox(width: 16),&#10;                  Expanded(&#10;                    child: Column(&#10;                      crossAxisAlignment: CrossAxisAlignment.start,&#10;                      children: [&#10;                        Text(&#10;                            isLoading ? 'Yükleniyor...' : (userName ?? 'Kullanıcı'),&#10;                            style: const TextStyle(color: Colors.white, fontSize: 18)),&#10;                        const SizedBox(height: 4),&#10;                        Text(&#10;                          userEmail,&#10;                          style: const TextStyle(color: Colors.white54, fontSize: 14),&#10;                        ),&#10;                      ],&#10;                    ),&#10;                  ),&#10;                  ElevatedButton(&#10;                    style: ElevatedButton.styleFrom(&#10;                      backgroundColor: Colors.red,&#10;                      padding: const EdgeInsets.symmetric(&#10;                          vertical: 8, horizontal: 12),&#10;                    ),&#10;                    onPressed: _pickImage,&#10;                    child: const Text(&quot;Fotoğraf Ekle&quot;),&#10;                  ),&#10;                ],&#10;              ),&#10;&#10;              const SizedBox(height: 24),&#10;              const Text(&quot;Beğendiğim Filmler&quot;,&#10;                  style: TextStyle(color: Colors.white, fontSize: 16)),&#10;              const SizedBox(height: 12),&#10;&#10;              // Favori Filmler Grid&#10;              Expanded(&#10;                child: Stack(&#10;                  children: [&#10;                    GridView.builder(&#10;                      controller: _scrollController,&#10;                      itemCount: profileViewModel.favoriteMovies.length,&#10;                      padding: const EdgeInsets.only(bottom: 15),&#10;                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(&#10;                        crossAxisCount: 2,&#10;                        mainAxisSpacing: 16,&#10;                        crossAxisSpacing: 16,&#10;                        childAspectRatio: 0.6,&#10;                      ),&#10;                      itemBuilder: (context, index) {&#10;                        final movie = profileViewModel.favoriteMovies[index];&#10;                        return LayoutBuilder(&#10;                          builder: (context, constraints) {&#10;                            return ClipRRect(&#10;                              borderRadius: BorderRadius.circular(12),&#10;                              child: Container(&#10;                                color: Colors.white10,&#10;                                child: Column(&#10;                                  crossAxisAlignment: CrossAxisAlignment.start,&#10;                                  children: [&#10;                                    // Poster&#10;                                    SizedBox(&#10;                                      height: constraints.maxHeight * 0.75,&#10;                                      width: double.infinity,&#10;                                      child: movie.imageUrl != null&#10;                                          ? Image.network(movie.imageUrl!, fit: BoxFit.cover)&#10;                                          : const SizedBox(),&#10;                                    ),&#10;&#10;                                    // Başlık ve açıklama&#10;                                    Padding(&#10;                                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),&#10;                                      child: Text(&#10;                                        movie.title,&#10;                                        style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                                        maxLines: 1,&#10;                                        overflow: TextOverflow.ellipsis,&#10;                                      ),&#10;                                    ),&#10;                                    Padding(&#10;                                      padding: const EdgeInsets.symmetric(horizontal: 8),&#10;                                      child: Text(&#10;                                        movie.description ?? 'Bilinmiyor',&#10;                                        style: const TextStyle(color: Colors.white54, fontSize: 12),&#10;                                        maxLines: 2,&#10;                                        overflow: TextOverflow.ellipsis,&#10;                                      ),&#10;                                    ),&#10;                                  ],&#10;                                ),&#10;                              ),&#10;                            );&#10;                          },&#10;                        );&#10;                      },&#10;                    ),&#10;                    if (profileViewModel.isLoadingMore)&#10;                      Positioned(&#10;                        left: 0,&#10;                        right: 0,&#10;                        bottom: 0,&#10;                        child: Center(&#10;                          child: Padding(&#10;                            padding: const EdgeInsets.all(16.0),&#10;                            child: CircularProgressIndicator(),&#10;                          ),&#10;                        ),&#10;                      ),&#10;                  ],&#10;                ),&#10;              )&#10;            ],&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/splash_screen.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/splash_screen.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import 'login_page.dart';&#10;import 'main_screen.dart';&#10;&#10;class SplashScreen extends StatefulWidget {&#10;  const SplashScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();&#10;}&#10;&#10;class _SplashScreenState extends State&lt;SplashScreen&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    Future.delayed(const Duration(seconds: 2), _checkAuth);&#10;  }&#10;&#10;  Future&lt;void&gt; _checkAuth() async {&#10;    final authViewModel = context.read&lt;AuthViewModel&gt;();&#10;    final user = authViewModel.user ?? authViewModel.currentUser;&#10;    if (user != null) {&#10;      authViewModel.setUser(user);&#10;      await authViewModel.fetchUserName();&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;      );&#10;    } else {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SizedBox.expand(&#10;        child: Image(&#10;          image: AssetImage('assets/SinFlixSplash.png'),&#10;          fit: BoxFit.cover,&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;import 'login_page.dart';&#10;import 'main_screen.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;&#10;class SplashScreen extends StatefulWidget {&#10;  const SplashScreen({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();&#10;}&#10;&#10;class _SplashScreenState extends State&lt;SplashScreen&gt; {&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    Future.delayed(const Duration(seconds: 2), _checkAuth);&#10;  }&#10;&#10;  Future&lt;void&gt; _checkAuth() async {&#10;    final storage = const FlutterSecureStorage();&#10;    final token = await storage.read(key: 'token');&#10;    if (token != null &amp;&amp; token.isNotEmpty) {&#10;      // Token varsa ana ekrana yönlendir&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const MainScreen()),&#10;      );&#10;    } else {&#10;      // Token yoksa login ekranına yönlendir&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: SizedBox.expand(&#10;        child: Image(&#10;          image: AssetImage('assets/SinFlixSplash.png'),&#10;          fit: BoxFit.cover,&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/auth_viewmodel.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/auth_viewmodel.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../../../data/models/login_model.dart';&#10;&#10;class AuthViewModel extends ChangeNotifier {&#10;  final AuthService _authService;&#10;&#10;  AuthViewModel(this._authService);&#10;&#10;  // Text controllerlar&#10;  final TextEditingController nameController = TextEditingController();&#10;  final TextEditingController emailController = TextEditingController();&#10;  final TextEditingController passwordController = TextEditingController();&#10;  final TextEditingController repeatPasswordController = TextEditingController();&#10;&#10;  // Şifre gizleme&#10;  bool _obscure1 = true;&#10;  bool get obscure1 =&gt; _obscure1;&#10;  void toggleObscure1() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool _obscure2 = true;&#10;  bool get obscure2 =&gt; _obscure2;&#10;  void toggleObscure2() {&#10;    _obscure2 = !_obscure2;&#10;    notifyListeners();&#10;  }&#10;&#10;  void togglePasswordVisibility() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool get obscurePassword =&gt; _obscure1;&#10;&#10;  // Kullanıcı sözleşmesi&#10;  bool _termsAccepted = false;&#10;  bool get termsAccepted =&gt; _termsAccepted;&#10;  void setTermsAccepted(bool value) {&#10;    _termsAccepted = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Auth durumları&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;&#10;  String? _errorMessage;&#10;  String? get errorMessage =&gt; _errorMessage;&#10;&#10;  LoginModel? _loginModel;&#10;  LoginModel? get loginModel =&gt; _loginModel;&#10;&#10;  // Kullanıcı adı durumu&#10;  String? _userName;&#10;  String? get userName =&gt; _userName;&#10;  bool _isUserNameLoading = false;&#10;  bool get isUserNameLoading =&gt; _isUserNameLoading;&#10;&#10;  Future&lt;void&gt; login() async {&#10;    _setLoading(true);&#10;    try {&#10;      _loginModel = await _authService.login(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;      _userName = _loginModel?.name;&#10;    } catch (e) {&#10;      _errorMessage = 'Giriş başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; register() async {&#10;    _setLoading(true);&#10;    try {&#10;      await _authService.register(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;        nameController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Kayıt başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  void clearError() {&#10;    _errorMessage = null;&#10;    notifyListeners();&#10;  }&#10;&#10;  void _setLoading(bool value) {&#10;    _isLoading = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  void clearControllers() {&#10;    nameController.clear();&#10;    emailController.clear();&#10;    passwordController.clear();&#10;    repeatPasswordController.clear();&#10;  }&#10;&#10;  Future&lt;void&gt; fetchUserName() async {&#10;    _isUserNameLoading = true;&#10;    notifyListeners();&#10;    // Token ile kullanıcı adı alınacaksa burada eklenir, şimdilik loginModel'den alınıyor&#10;    _userName = _loginModel?.name ?? 'Kullanıcı';&#10;    _isUserNameLoading = false;&#10;    notifyListeners();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;import '../../../data/services/auth_service.dart';&#10;import '../../../data/models/login_model.dart';&#10;&#10;class AuthViewModel extends ChangeNotifier {&#10;  final AuthService _authService;&#10;  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();&#10;&#10;  AuthViewModel(this._authService);&#10;&#10;  // Text controllerlar&#10;  final TextEditingController nameController = TextEditingController();&#10;  final TextEditingController emailController = TextEditingController();&#10;  final TextEditingController passwordController = TextEditingController();&#10;  final TextEditingController repeatPasswordController = TextEditingController();&#10;&#10;  // Şifre gizleme&#10;  bool _obscure1 = true;&#10;  bool get obscure1 =&gt; _obscure1;&#10;  void toggleObscure1() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool _obscure2 = true;&#10;  bool get obscure2 =&gt; _obscure2;&#10;  void toggleObscure2() {&#10;    _obscure2 = !_obscure2;&#10;    notifyListeners();&#10;  }&#10;&#10;  void togglePasswordVisibility() {&#10;    _obscure1 = !_obscure1;&#10;    notifyListeners();&#10;  }&#10;&#10;  bool get obscurePassword =&gt; _obscure1;&#10;&#10;  // Kullanıcı sözleşmesi&#10;  bool _termsAccepted = false;&#10;  bool get termsAccepted =&gt; _termsAccepted;&#10;  void setTermsAccepted(bool value) {&#10;    _termsAccepted = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  // Auth durumları&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;&#10;  String? _errorMessage;&#10;  String? get errorMessage =&gt; _errorMessage;&#10;&#10;  LoginModel? _loginModel;&#10;  LoginModel? get loginModel =&gt; _loginModel;&#10;&#10;  // Kullanıcı adı durumu&#10;  String? _userName;&#10;  String? get userName =&gt; _userName;&#10;  bool _isUserNameLoading = false;&#10;  bool get isUserNameLoading =&gt; _isUserNameLoading;&#10;&#10;  Future&lt;void&gt; login() async {&#10;    _setLoading(true);&#10;    try {&#10;      _loginModel = await _authService.login(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;      );&#10;      // Token'ı güvenli şekilde sakla&#10;      if (_loginModel?.token != null) {&#10;        await _secureStorage.write(key: 'token', value: _loginModel!.token);&#10;      }&#10;      _errorMessage = null;&#10;      _userName = _loginModel?.name;&#10;    } catch (e) {&#10;      _errorMessage = 'Giriş başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; register() async {&#10;    _setLoading(true);&#10;    try {&#10;      await _authService.register(&#10;        emailController.text.trim(),&#10;        passwordController.text.trim(),&#10;        nameController.text.trim(),&#10;      );&#10;      _errorMessage = null;&#10;    } catch (e) {&#10;      _errorMessage = 'Kayıt başarısız: $e';&#10;    } finally {&#10;      _setLoading(false);&#10;    }&#10;  }&#10;&#10;  void clearError() {&#10;    _errorMessage = null;&#10;    notifyListeners();&#10;  }&#10;&#10;  void _setLoading(bool value) {&#10;    _isLoading = value;&#10;    notifyListeners();&#10;  }&#10;&#10;  void clearControllers() {&#10;    nameController.clear();&#10;    emailController.clear();&#10;    passwordController.clear();&#10;    repeatPasswordController.clear();&#10;  }&#10;&#10;  Future&lt;void&gt; fetchUserName() async {&#10;    _isUserNameLoading = true;&#10;    notifyListeners();&#10;    // Token ile kullanıcı adı alınacaksa burada eklenir, şimdilik loginModel'den alınıyor&#10;    _userName = _loginModel?.name ?? 'Kullanıcı';&#10;    _isUserNameLoading = false;&#10;    notifyListeners();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/home_cubit.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/home_cubit.dart" />
              <option name="originalContent" value="import 'dart:math';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../data/repositories/movie_repository.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../../../domain/entities/movie_page_result.dart';&#10;import 'home_state.dart';&#10;&#10;class HomeCubit extends Cubit&lt;HomeState&gt; {&#10;  final MovieRepository movieRepository;&#10;  int _currentPage = 1;&#10;  int _totalPages = 1;&#10;  bool _isLoadingMore = false;&#10;  final List&lt;Movie&gt; _allMovies = [];&#10;&#10;  HomeCubit(this.movieRepository) : super(HomeInitial());&#10;&#10;  Future&lt;void&gt; fetchMovies({bool loadMore = false}) async {&#10;    if (_isLoadingMore) return;&#10;    _isLoadingMore = true;&#10;&#10;    if (!loadMore) {&#10;      emit(HomeLoading());&#10;      _allMovies.clear();&#10;      _currentPage = 1;&#10;    } else {&#10;      if (_currentPage &gt;= _totalPages) {&#10;        _isLoadingMore = false;&#10;        return;&#10;      }&#10;      _currentPage++;&#10;    }&#10;&#10;    try {&#10;      final pageResult = await movieRepository.getMovies(_currentPage);&#10;      _totalPages = pageResult.totalPages;&#10;      _allMovies.addAll(pageResult.movies);&#10;      emit(HomeLoaded(MoviePageResult(&#10;        movies: List.from(_allMovies),&#10;        currentPage: _currentPage,&#10;        totalPages: _totalPages,&#10;      )));&#10;    } catch (e) {&#10;      emit(HomeError('Hata: $e'));&#10;    } finally {&#10;      _isLoadingMore = false;&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'dart:math';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../data/repositories/movie_repository.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../../../domain/entities/movie_page_result.dart';&#10;import 'home_state.dart';&#10;&#10;class HomeCubit extends Cubit&lt;HomeState&gt; {&#10;  final MovieRepository movieRepository;&#10;  int _currentPage = 1;&#10;  int _totalPages = 1;&#10;  bool _isLoadingMore = false;&#10;  final List&lt;Movie&gt; _allMovies = [];&#10;&#10;  HomeCubit(this.movieRepository) : super(HomeInitial());&#10;&#10;  Future&lt;void&gt; fetchMovies({bool loadMore = false}) async {&#10;    if (_isLoadingMore) return;&#10;    _isLoadingMore = true;&#10;&#10;    if (!loadMore) {&#10;      emit(HomeLoading());&#10;      _allMovies.clear();&#10;      _currentPage = 1;&#10;    } else {&#10;      if (_currentPage &gt;= _totalPages) {&#10;        _isLoadingMore = false;&#10;        return;&#10;      }&#10;      _currentPage++;&#10;    }&#10;&#10;    try {&#10;      final pageResult = await movieRepository.getMoviesPageResult(_currentPage);&#10;      _totalPages = pageResult.totalPages;&#10;      _allMovies.addAll(pageResult.movies);&#10;      emit(HomeLoaded(MoviePageResult(&#10;        movies: List.from(_allMovies),&#10;        currentPage: _currentPage,&#10;        totalPages: _totalPages,&#10;      )));&#10;    } catch (e) {&#10;      emit(HomeError('Hata: $e'));&#10;    } finally {&#10;      _isLoadingMore = false;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/home_state.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/home_state.dart" />
              <option name="originalContent" value="import '../../../domain/entities/movie.dart';&#10;&#10;abstract class HomeState {}&#10;&#10;class HomeInitial extends HomeState {}&#10;&#10;class HomeLoading extends HomeState {}&#10;&#10;class HomeLoaded extends HomeState {&#10;  final List&lt;Movie&gt; movies;&#10;&#10;  HomeLoaded(this.movies);&#10;}&#10;&#10;class HomeError extends HomeState {&#10;  final String message;&#10;&#10;  HomeError(this.message);&#10;}" />
              <option name="updatedContent" value="import '../../../domain/entities/movie_page_result.dart';&#10;&#10;abstract class HomeState {}&#10;&#10;class HomeInitial extends HomeState {}&#10;&#10;class HomeLoading extends HomeState {}&#10;&#10;class HomeLoaded extends HomeState {&#10;  final MoviePageResult pageResult;&#10;&#10;  HomeLoaded(this.pageResult);&#10;}&#10;&#10;class HomeError extends HomeState {&#10;  final String message;&#10;&#10;  HomeError(this.message);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/profile_viewmodel.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/profile_viewmodel.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;import 'package:http/http.dart' as http;&#10;import '../../../data/datasources/favorite_movie_remote_datasource.dart';&#10;import '../../../data/models/favorite_movie_model.dart';&#10;import '../../../domain/entities/favorite_movie_entity.dart';&#10;&#10;class ProfileViewModel extends ChangeNotifier {&#10;  final FavoriteMovieRemoteDataSource remoteDataSource;&#10;  final FlutterSecureStorage secureStorage;&#10;&#10;  ProfileViewModel({&#10;    required this.remoteDataSource,&#10;    required this.secureStorage,&#10;  });&#10;&#10;  List&lt;FavoriteMovieEntity&gt; _favoriteMovies = [];&#10;  List&lt;FavoriteMovieEntity&gt; get favoriteMovies =&gt; _favoriteMovies;&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;  String? _error;&#10;  String? get error =&gt; _error;&#10;  int _currentPage = 1;&#10;  bool _hasMore = true;&#10;  bool get hasMore =&gt; _hasMore;&#10;  bool _isLoadingMore = false;&#10;  bool get isLoadingMore =&gt; _isLoadingMore;&#10;  static const int _pageSize = 20;&#10;&#10;  Future&lt;void&gt; loadFavorites({bool refresh = false}) async {&#10;    if (refresh) {&#10;      _currentPage = 1;&#10;      _hasMore = true;&#10;      _favoriteMovies = [];&#10;    }&#10;    _isLoading = true;&#10;    _error = null;&#10;    notifyListeners();&#10;    try {&#10;      final token = await secureStorage.read(key: 'token');&#10;      if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;      final models = await remoteDataSource.getFavoriteMovies(token, page: _currentPage, pageSize: _pageSize);&#10;      final movies = models.map((e) =&gt; e.toEntity()).toList();&#10;      if (_currentPage == 1) {&#10;        _favoriteMovies = movies;&#10;      } else {&#10;        _favoriteMovies.addAll(movies);&#10;      }&#10;      _hasMore = movies.length == _pageSize;&#10;    } catch (e) {&#10;      _error = e.toString();&#10;      if (_currentPage == 1) _favoriteMovies = [];&#10;      _hasMore = false;&#10;    } finally {&#10;      _isLoading = false;&#10;      notifyListeners();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; loadMoreFavorites() async {&#10;    if (_isLoadingMore || !_hasMore) return;&#10;    _isLoadingMore = true;&#10;    notifyListeners();&#10;    try {&#10;      _currentPage++;&#10;      final token = await secureStorage.read(key: 'token');&#10;      if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;      final models = await remoteDataSource.getFavoriteMovies(token, page: _currentPage, pageSize: _pageSize);&#10;      final movies = models.map((e) =&gt; e.toEntity()).toList();&#10;      _favoriteMovies.addAll(movies);&#10;      _hasMore = movies.length == _pageSize;&#10;    } catch (e) {&#10;      _error = e.toString();&#10;      _hasMore = false;&#10;    } finally {&#10;      _isLoadingMore = false;&#10;      notifyListeners();&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_secure_storage/flutter_secure_storage.dart';&#10;import 'package:http/http.dart' as http;&#10;import '../../../data/datasources/favorite_movie_remote_datasource.dart';&#10;import '../../../data/models/favorite_movie_model.dart';&#10;import '../../../domain/entities/favorite_movie_entity.dart';&#10;&#10;class ProfileViewModel extends ChangeNotifier {&#10;  final FavoriteMovieRemoteDataSource remoteDataSource;&#10;  final FlutterSecureStorage secureStorage;&#10;&#10;  ProfileViewModel({&#10;    required this.remoteDataSource,&#10;    required this.secureStorage,&#10;  });&#10;&#10;  List&lt;FavoriteMovieEntity&gt; _favoriteMovies = [];&#10;  List&lt;FavoriteMovieEntity&gt; get favoriteMovies =&gt; _favoriteMovies;&#10;  bool _isLoading = false;&#10;  bool get isLoading =&gt; _isLoading;&#10;  String? _error;&#10;  String? get error =&gt; _error;&#10;  int _currentPage = 1;&#10;  bool _hasMore = true;&#10;  bool get hasMore =&gt; _hasMore;&#10;  bool _isLoadingMore = false;&#10;  bool get isLoadingMore =&gt; _isLoadingMore;&#10;  static const int _pageSize = 5;&#10;&#10;  Future&lt;void&gt; loadFavorites({bool refresh = false}) async {&#10;    if (refresh) {&#10;      _currentPage = 1;&#10;      _hasMore = true;&#10;      _favoriteMovies = [];&#10;    }&#10;    _isLoading = true;&#10;    _error = null;&#10;    notifyListeners();&#10;    try {&#10;      final token = await secureStorage.read(key: 'token');&#10;      if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;      final models = await remoteDataSource.getFavoriteMovies(token, page: _currentPage, pageSize: _pageSize);&#10;      final movies = models.map((e) =&gt; e.toEntity()).toList();&#10;      if (_currentPage == 1) {&#10;        _favoriteMovies = movies;&#10;      } else {&#10;        _favoriteMovies.addAll(movies);&#10;      }&#10;      _hasMore = movies.length == _pageSize;&#10;    } catch (e) {&#10;      _error = e.toString();&#10;      if (_currentPage == 1) _favoriteMovies = [];&#10;      _hasMore = false;&#10;    } finally {&#10;      _isLoading = false;&#10;      notifyListeners();&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; loadMoreFavorites() async {&#10;    if (_isLoadingMore || !_hasMore) return;&#10;    _isLoadingMore = true;&#10;    notifyListeners();&#10;    try {&#10;      _currentPage++;&#10;      final token = await secureStorage.read(key: 'token');&#10;      if (token == null) throw Exception('Kullanıcı tokenı bulunamadı!');&#10;      final models = await remoteDataSource.getFavoriteMovies(token, page: _currentPage, pageSize: _pageSize);&#10;      final movies = models.map((e) =&gt; e.toEntity()).toList();&#10;      _favoriteMovies.addAll(movies);&#10;      _hasMore = movies.length == _pageSize;&#10;    } catch (e) {&#10;      _error = e.toString();&#10;      _hasMore = false;&#10;    } finally {&#10;      _isLoadingMore = false;&#10;      notifyListeners();&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/viewmodel/splash_viewmodel.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/viewmodel/splash_viewmodel.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../view/login_page.dart';&#10;import '../view/home_page.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;&#10;class SplashViewModel extends ChangeNotifier {&#10;  Future&lt;void&gt; checkUserSession(BuildContext context) async {&#10;    final authViewModel = Provider.of&lt;AuthViewModel&gt;(context, listen: false);&#10;&#10;    // Kullanıcı oturum durumunu kontrol et&#10;    final isLoggedIn = authViewModel.user != null;&#10;&#10;    // Yönlendirme&#10;    if (isLoggedIn) {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const HomePage()),&#10;      );&#10;    } else {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:provider/provider.dart';&#10;import '../view/login_page.dart';&#10;import '../view/home_page.dart';&#10;import '../viewmodel/auth_viewmodel.dart';&#10;&#10;class SplashViewModel extends ChangeNotifier {&#10;  Future&lt;void&gt; checkUserSession(BuildContext context) async {&#10;    final authViewModel = Provider.of&lt;AuthViewModel&gt;(context, listen: false);&#10;&#10;    // Kullanıcı oturum durumunu kontrol et&#10;    final isLoggedIn = authViewModel.loginModel != null;&#10;&#10;    // Yönlendirme&#10;    if (isLoggedIn) {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const HomePage()),&#10;      );&#10;    } else {&#10;      Navigator.pushReplacement(&#10;        context,&#10;        MaterialPageRoute(builder: (context) =&gt; const LoginPage()),&#10;      );&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
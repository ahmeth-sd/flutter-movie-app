<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/data/models/movie_model.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/models/movie_model.dart" />
              <option name="originalContent" value="class MovieModel {&#10;  final int id;&#10;  final String title;&#10;  final String? overview;&#10;  final String? posterPath;&#10;&#10;  MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.overview,&#10;    this.posterPath,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return MovieModel(&#10;      id: json['id'],&#10;      title: json['title'],&#10;      overview: json['overview'],&#10;      posterPath: json['poster_path'],&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:hive/hive.dart';&#10;&#10;part 'movie_model.g.dart';&#10;&#10;@HiveType(typeId: 0)&#10;class MovieModel extends HiveObject {&#10;  @HiveField(0)&#10;  final int id;&#10;  @HiveField(1)&#10;  final String title;&#10;  @HiveField(2)&#10;  final String? overview;&#10;  @HiveField(3)&#10;  final String? posterPath;&#10;&#10;  MovieModel({&#10;    required this.id,&#10;    required this.title,&#10;    this.overview,&#10;    this.posterPath,&#10;  });&#10;&#10;  factory MovieModel.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    return MovieModel(&#10;      id: json['id'],&#10;      title: json['title'],&#10;      overview: json['overview'],&#10;      posterPath: json['poster_path'],&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/data/storage/favorites_storage.dart" />
              <option name="updatedContent" value="import 'package:hive/hive.dart';&#10;import '../models/movie_model.dart';&#10;&#10;class FavoritesStorage {&#10;  static const String boxName = 'favorites';&#10;&#10;  Box&lt;MovieModel&gt; get _box =&gt; Hive.box&lt;MovieModel&gt;(boxName);&#10;&#10;  Future&lt;void&gt; addFavorite(MovieModel movie) async {&#10;    // Aynı film eklenmesin&#10;    if (!_box.values.any((m) =&gt; m.id == movie.id)) {&#10;      await _box.add(movie);&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; removeFavorite(int movieId) async {&#10;    final key = _box.keys.firstWhere(&#10;      (k) =&gt; _box.get(k)?.id == movieId,&#10;      orElse: () =&gt; null,&#10;    );&#10;    if (key != null) await _box.delete(key);&#10;  }&#10;&#10;  List&lt;MovieModel&gt; getFavorites() {&#10;    return _box.values.toList();&#10;  }&#10;&#10;  bool isFavorite(int movieId) {&#10;    return _box.values.any((m) =&gt; m.id == movieId);&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/presentation/home/view/discover_page.dart" />
              <option name="originalContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  void _toggleLike(int index) {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.filled(movies.length, false);&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
              <option name="updatedContent" value="import 'package:flutter/material.dart';&#10;import 'package:flutter_bloc/flutter_bloc.dart';&#10;import '../../../domain/entities/movie.dart';&#10;import '../viewmodel/home_cubit.dart';&#10;import '../viewmodel/home_state.dart';&#10;import '../../../data/storage/favorites_storage.dart';&#10;import '../../../data/models/movie_model.dart';&#10;&#10;class DiscoverPage extends StatefulWidget {&#10;  const DiscoverPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;DiscoverPage&gt; createState() =&gt; _DiscoverPageState();&#10;}&#10;&#10;class _DiscoverPageState extends State&lt;DiscoverPage&gt; {&#10;  final PageController _pageController = PageController();&#10;  List&lt;bool&gt; liked = [];&#10;  final FavoritesStorage _favoritesStorage = FavoritesStorage();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;    _pageController.addListener(_onScroll);&#10;    // İlk filmleri yükle (main.dart'ta da çağrılıyor, burada tekrar çağırmaya gerek yok)&#10;  }&#10;&#10;  void _onScroll() {&#10;    final cubit = context.read&lt;HomeCubit&gt;();&#10;    final state = cubit.state;&#10;    if (state is HomeLoaded) {&#10;      // Son karta gelindiyse yeni filmleri yükle&#10;      if (_pageController.page != null &amp;&amp;&#10;          _pageController.page!.round() &gt;= state.movies.length - 1) {&#10;        cubit.fetchMovies(loadMore: true);&#10;      }&#10;    }&#10;  }&#10;&#10;  Future&lt;void&gt; _toggleLike(int index, movie) async {&#10;    setState(() {&#10;      liked[index] = !liked[index];&#10;    });&#10;    if (liked[index]) {&#10;      // Favoriye ekle&#10;      final movieModel = MovieModel(&#10;        id: movie.id,&#10;        title: movie.title,&#10;        overview: movie.description,&#10;        posterPath: movie.imageUrl != null &amp;&amp; movie.imageUrl!.contains('/w500')&#10;            ? movie.imageUrl!.replaceFirst('https://image.tmdb.org/t/p/w500', '')&#10;            : movie.imageUrl,&#10;      );&#10;      await _favoritesStorage.addFavorite(movieModel);&#10;    } else {&#10;      await _favoritesStorage.removeFavorite(movie.id);&#10;    }&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    _pageController.removeListener(_onScroll);&#10;    _pageController.dispose();&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      backgroundColor: Colors.black,&#10;      body: BlocBuilder&lt;HomeCubit, HomeState&gt;(&#10;        builder: (context, state) {&#10;          if (state is HomeLoading) {&#10;            return const Center(child: CircularProgressIndicator());&#10;          } else if (state is HomeLoaded) {&#10;            final movies = state.movies;&#10;            if (liked.length != movies.length) {&#10;              liked = List&lt;bool&gt;.generate(&#10;                movies.length,&#10;                (i) =&gt; _favoritesStorage.isFavorite(movies[i].id),&#10;              );&#10;            }&#10;            return PageView.builder(&#10;              scrollDirection: Axis.vertical,&#10;              controller: _pageController,&#10;              itemCount: movies.length,&#10;              itemBuilder: (context, index) {&#10;                final movie = movies[index];&#10;                return Stack(&#10;                  fit: StackFit.expand,&#10;                  children: [&#10;                    Image.network(&#10;                      movie.imageUrl ?? '',&#10;                      fit: BoxFit.cover,&#10;                      errorBuilder: (context, error, stackTrace) =&gt; Container(color: Colors.grey),&#10;                    ),&#10;                    Container(&#10;                      decoration: BoxDecoration(&#10;                        gradient: LinearGradient(&#10;                          begin: Alignment.bottomCenter,&#10;                          end: Alignment.topCenter,&#10;                          colors: [Colors.black.withOpacity(0.8), Colors.transparent],&#10;                        ),&#10;                      ),&#10;                    ),&#10;                    Positioned(&#10;                      bottom: 60,&#10;                      left: 16,&#10;                      right: 16,&#10;                      child: Column(&#10;                        crossAxisAlignment: CrossAxisAlignment.start,&#10;                        children: [&#10;                          Text(&#10;                            movie.title,&#10;                            style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),&#10;                          ),&#10;                          const SizedBox(height: 8),&#10;                          Text(&#10;                            movie.description ?? 'Açıklama yok',&#10;                            style: const TextStyle(color: Colors.white, fontSize: 16),&#10;                          ),&#10;                        ],&#10;                      ),&#10;                    ),&#10;&#10;                    Positioned(&#10;                      top: 450,&#10;                      right: 20,&#10;                      child: Container(&#10;                        decoration: BoxDecoration(&#10;                          shape: BoxShape.circle,&#10;                          color: Colors.black.withOpacity(0.5),&#10;                        ),&#10;                        child: IconButton(&#10;                          icon: Icon(&#10;                            liked[index] ? Icons.favorite : Icons.favorite_border,&#10;                            color: liked[index] ? Colors.red : Colors.white,&#10;                            size: 30,&#10;                          ),&#10;                          onPressed: () =&gt; _toggleLike(index, movie),&#10;                        ),&#10;                      ),&#10;                    ),&#10;&#10;&#10;&#10;                  ],&#10;                );&#10;              },&#10;            );&#10;          } else if (state is HomeError) {&#10;            return Center(child: Text(state.message, style: const TextStyle(color: Colors.white)));&#10;          } else {&#10;            return const SizedBox.shrink();&#10;          }&#10;        },&#10;      ),&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>